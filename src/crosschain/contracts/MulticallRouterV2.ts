/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common.js'

export interface MulticallRouterV2Interface extends utils.Interface {
    functions: {
        'multicall(uint256,bytes[],address[],address[],uint256[],bool[],address)': FunctionFragment
    }

    getFunction(nameOrSignatureOrTopic: 'multicall'): FunctionFragment

    encodeFunctionData(
        functionFragment: 'multicall',
        values: [BigNumberish, BytesLike[], string[], string[], BigNumberish[], boolean[], string]
    ): string

    decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result

    events: {}
}

export interface MulticallRouterV2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: MulticallRouterV2Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        multicall(
            _amountIn: BigNumberish,
            _calldata: BytesLike[],
            _receiveSides: string[],
            _path: string[],
            _offset: BigNumberish[],
            _isNativeIn: boolean[],
            _to: string,
            overrides?: PayableOverrides & { from?: string }
        ): Promise<ContractTransaction>
    }

    multicall(
        _amountIn: BigNumberish,
        _calldata: BytesLike[],
        _receiveSides: string[],
        _path: string[],
        _offset: BigNumberish[],
        _isNativeIn: boolean[],
        _to: string,
        overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>

    callStatic: {
        multicall(
            _amountIn: BigNumberish,
            _calldata: BytesLike[],
            _receiveSides: string[],
            _path: string[],
            _offset: BigNumberish[],
            _isNativeIn: boolean[],
            _to: string,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {}

    estimateGas: {
        multicall(
            _amountIn: BigNumberish,
            _calldata: BytesLike[],
            _receiveSides: string[],
            _path: string[],
            _offset: BigNumberish[],
            _isNativeIn: boolean[],
            _to: string,
            overrides?: PayableOverrides & { from?: string }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        multicall(
            _amountIn: BigNumberish,
            _calldata: BytesLike[],
            _receiveSides: string[],
            _path: string[],
            _offset: BigNumberish[],
            _isNativeIn: boolean[],
            _to: string,
            overrides?: PayableOverrides & { from?: string }
        ): Promise<PopulatedTransaction>
    }
}
