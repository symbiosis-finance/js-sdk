/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import { FunctionFragment, Result } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export declare namespace DepositoryTypes {
    export type UnlockConditionStruct = {
        unlocker: string
        condition: BytesLike
    }

    export type UnlockConditionStructOutput = [string, string] & {
        unlocker: string
        condition: string
    }

    export type DepositStruct = {
        token: string
        amount: BigNumberish
        nonce: BigNumberish
    }

    export type DepositStructOutput = [string, BigNumber, BigNumber] & {
        token: string
        amount: BigNumber
        nonce: BigNumber
    }
}

export declare namespace BranchedUnlocker {
    export type ConditionStruct = {
        branches: DepositoryTypes.UnlockConditionStruct[]
    }

    export type ConditionStructOutput = [DepositoryTypes.UnlockConditionStructOutput[]] & {
        branches: DepositoryTypes.UnlockConditionStructOutput[]
    }

    export type SolutionStruct = { index: BigNumberish; solution: BytesLike }

    export type SolutionStructOutput = [BigNumber, string] & {
        index: BigNumber
        solution: string
    }
}

export interface BranchedUnlockerInterface extends utils.Interface {
    contractName: 'BranchedUnlocker'
    functions: {
        'decodeCondition(bytes)': FunctionFragment
        'encodeCondition(((address,bytes)[]))': FunctionFragment
        'encodeSolution((uint256,bytes))': FunctionFragment
        'unlock(address,(address,uint256,uint256),bytes,bytes)': FunctionFragment
    }

    encodeFunctionData(functionFragment: 'decodeCondition', values: [BytesLike]): string
    encodeFunctionData(functionFragment: 'encodeCondition', values: [BranchedUnlocker.ConditionStruct]): string
    encodeFunctionData(functionFragment: 'encodeSolution', values: [BranchedUnlocker.SolutionStruct]): string
    encodeFunctionData(
        functionFragment: 'unlock',
        values: [string, DepositoryTypes.DepositStruct, BytesLike, BytesLike]
    ): string

    decodeFunctionResult(functionFragment: 'decodeCondition', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'encodeCondition', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'encodeSolution', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'unlock', data: BytesLike): Result

    events: {}
}

export interface BranchedUnlocker extends BaseContract {
    contractName: 'BranchedUnlocker'
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: BranchedUnlockerInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        decodeCondition(
            condition: BytesLike,
            overrides?: CallOverrides
        ): Promise<[BranchedUnlocker.ConditionStructOutput]>

        encodeCondition(c: BranchedUnlocker.ConditionStruct, overrides?: CallOverrides): Promise<[string]>

        encodeSolution(s: BranchedUnlocker.SolutionStruct, overrides?: CallOverrides): Promise<[string]>

        unlock(
            router: string,
            deposit: DepositoryTypes.DepositStruct,
            condition: BytesLike,
            solution: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>
    }

    decodeCondition(condition: BytesLike, overrides?: CallOverrides): Promise<BranchedUnlocker.ConditionStructOutput>

    encodeCondition(c: BranchedUnlocker.ConditionStruct, overrides?: CallOverrides): Promise<string>

    encodeSolution(s: BranchedUnlocker.SolutionStruct, overrides?: CallOverrides): Promise<string>

    unlock(
        router: string,
        deposit: DepositoryTypes.DepositStruct,
        condition: BytesLike,
        solution: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        decodeCondition(
            condition: BytesLike,
            overrides?: CallOverrides
        ): Promise<BranchedUnlocker.ConditionStructOutput>

        encodeCondition(c: BranchedUnlocker.ConditionStruct, overrides?: CallOverrides): Promise<string>

        encodeSolution(s: BranchedUnlocker.SolutionStruct, overrides?: CallOverrides): Promise<string>

        unlock(
            router: string,
            deposit: DepositoryTypes.DepositStruct,
            condition: BytesLike,
            solution: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {}

    estimateGas: {
        decodeCondition(condition: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

        encodeCondition(c: BranchedUnlocker.ConditionStruct, overrides?: CallOverrides): Promise<BigNumber>

        encodeSolution(s: BranchedUnlocker.SolutionStruct, overrides?: CallOverrides): Promise<BigNumber>

        unlock(
            router: string,
            deposit: DepositoryTypes.DepositStruct,
            condition: BytesLike,
            solution: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        decodeCondition(condition: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

        encodeCondition(c: BranchedUnlocker.ConditionStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>

        encodeSolution(s: BranchedUnlocker.SolutionStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>

        unlock(
            router: string,
            deposit: DepositoryTypes.DepositStruct,
            condition: BytesLike,
            solution: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>
    }
}
