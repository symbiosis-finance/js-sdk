/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export interface CreamCErc20Interface extends utils.Interface {
    contractName: 'CreamCErc20'
    functions: {
        '_acceptAdmin()': FunctionFragment
        '_addReserves(uint256)': FunctionFragment
        '_becomeImplementation(bytes)': FunctionFragment
        '_reduceReserves(uint256)': FunctionFragment
        '_resignImplementation()': FunctionFragment
        '_setCollateralCap(uint256)': FunctionFragment
        '_setComptroller(address)': FunctionFragment
        '_setInterestRateModel(address)': FunctionFragment
        '_setPendingAdmin(address)': FunctionFragment
        '_setReserveFactor(uint256)': FunctionFragment
        'accountCollateralTokens(address)': FunctionFragment
        'accrualBlockNumber()': FunctionFragment
        'accrueInterest()': FunctionFragment
        'admin()': FunctionFragment
        'allowance(address,address)': FunctionFragment
        'approve(address,uint256)': FunctionFragment
        'balanceOf(address)': FunctionFragment
        'balanceOfUnderlying(address)': FunctionFragment
        'borrow(uint256)': FunctionFragment
        'borrowBalanceCurrent(address)': FunctionFragment
        'borrowBalanceStored(address)': FunctionFragment
        'borrowIndex()': FunctionFragment
        'borrowRatePerBlock()': FunctionFragment
        'collateralCap()': FunctionFragment
        'comptroller()': FunctionFragment
        'decimals()': FunctionFragment
        'estimateBorrowRatePerBlockAfterChange(uint256,bool)': FunctionFragment
        'estimateSupplyRatePerBlockAfterChange(uint256,bool)': FunctionFragment
        'exchangeRateCurrent()': FunctionFragment
        'exchangeRateStored()': FunctionFragment
        'flashFee(uint256)': FunctionFragment
        'flashFeeBips()': FunctionFragment
        'flashLoan(address,address,uint256,bytes)': FunctionFragment
        'getAccountSnapshot(address)': FunctionFragment
        'getCash()': FunctionFragment
        'gulp()': FunctionFragment
        'implementation()': FunctionFragment
        'initialize(address,address,address,uint256,string,string,uint8)': FunctionFragment
        'interestRateModel()': FunctionFragment
        'internalCash()': FunctionFragment
        'isCToken()': FunctionFragment
        'isCollateralTokenInit(address)': FunctionFragment
        'liquidateBorrow(address,uint256,address)': FunctionFragment
        'maxFlashLoan()': FunctionFragment
        'mint(uint256)': FunctionFragment
        'name()': FunctionFragment
        'pendingAdmin()': FunctionFragment
        'redeem(uint256)': FunctionFragment
        'redeemUnderlying(uint256)': FunctionFragment
        'registerCollateral(address)': FunctionFragment
        'repayBorrow(uint256)': FunctionFragment
        'repayBorrowBehalf(address,uint256)': FunctionFragment
        'reserveFactorMantissa()': FunctionFragment
        'seize(address,address,uint256)': FunctionFragment
        'supplyRatePerBlock()': FunctionFragment
        'symbol()': FunctionFragment
        'totalBorrows()': FunctionFragment
        'totalBorrowsCurrent()': FunctionFragment
        'totalCollateralTokens()': FunctionFragment
        'totalReserves()': FunctionFragment
        'totalSupply()': FunctionFragment
        'transfer(address,uint256)': FunctionFragment
        'transferFrom(address,address,uint256)': FunctionFragment
        'underlying()': FunctionFragment
        'unregisterCollateral(address)': FunctionFragment
    }

    encodeFunctionData(functionFragment: '_acceptAdmin', values?: undefined): string
    encodeFunctionData(functionFragment: '_addReserves', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: '_becomeImplementation', values: [BytesLike]): string
    encodeFunctionData(functionFragment: '_reduceReserves', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: '_resignImplementation', values?: undefined): string
    encodeFunctionData(functionFragment: '_setCollateralCap', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: '_setComptroller', values: [string]): string
    encodeFunctionData(functionFragment: '_setInterestRateModel', values: [string]): string
    encodeFunctionData(functionFragment: '_setPendingAdmin', values: [string]): string
    encodeFunctionData(functionFragment: '_setReserveFactor', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'accountCollateralTokens', values: [string]): string
    encodeFunctionData(functionFragment: 'accrualBlockNumber', values?: undefined): string
    encodeFunctionData(functionFragment: 'accrueInterest', values?: undefined): string
    encodeFunctionData(functionFragment: 'admin', values?: undefined): string
    encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string
    encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
    encodeFunctionData(functionFragment: 'balanceOfUnderlying', values: [string]): string
    encodeFunctionData(functionFragment: 'borrow', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'borrowBalanceCurrent', values: [string]): string
    encodeFunctionData(functionFragment: 'borrowBalanceStored', values: [string]): string
    encodeFunctionData(functionFragment: 'borrowIndex', values?: undefined): string
    encodeFunctionData(functionFragment: 'borrowRatePerBlock', values?: undefined): string
    encodeFunctionData(functionFragment: 'collateralCap', values?: undefined): string
    encodeFunctionData(functionFragment: 'comptroller', values?: undefined): string
    encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'estimateBorrowRatePerBlockAfterChange',
        values: [BigNumberish, boolean]
    ): string
    encodeFunctionData(
        functionFragment: 'estimateSupplyRatePerBlockAfterChange',
        values: [BigNumberish, boolean]
    ): string
    encodeFunctionData(functionFragment: 'exchangeRateCurrent', values?: undefined): string
    encodeFunctionData(functionFragment: 'exchangeRateStored', values?: undefined): string
    encodeFunctionData(functionFragment: 'flashFee', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'flashFeeBips', values?: undefined): string
    encodeFunctionData(functionFragment: 'flashLoan', values: [string, string, BigNumberish, BytesLike]): string
    encodeFunctionData(functionFragment: 'getAccountSnapshot', values: [string]): string
    encodeFunctionData(functionFragment: 'getCash', values?: undefined): string
    encodeFunctionData(functionFragment: 'gulp', values?: undefined): string
    encodeFunctionData(functionFragment: 'implementation', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'initialize',
        values: [string, string, string, BigNumberish, string, string, BigNumberish]
    ): string
    encodeFunctionData(functionFragment: 'interestRateModel', values?: undefined): string
    encodeFunctionData(functionFragment: 'internalCash', values?: undefined): string
    encodeFunctionData(functionFragment: 'isCToken', values?: undefined): string
    encodeFunctionData(functionFragment: 'isCollateralTokenInit', values: [string]): string
    encodeFunctionData(functionFragment: 'liquidateBorrow', values: [string, BigNumberish, string]): string
    encodeFunctionData(functionFragment: 'maxFlashLoan', values?: undefined): string
    encodeFunctionData(functionFragment: 'mint', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'name', values?: undefined): string
    encodeFunctionData(functionFragment: 'pendingAdmin', values?: undefined): string
    encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'redeemUnderlying', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'registerCollateral', values: [string]): string
    encodeFunctionData(functionFragment: 'repayBorrow', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'repayBorrowBehalf', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'reserveFactorMantissa', values?: undefined): string
    encodeFunctionData(functionFragment: 'seize', values: [string, string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'supplyRatePerBlock', values?: undefined): string
    encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalBorrows', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalBorrowsCurrent', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalCollateralTokens', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalReserves', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
    encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'underlying', values?: undefined): string
    encodeFunctionData(functionFragment: 'unregisterCollateral', values: [string]): string

    decodeFunctionResult(functionFragment: '_acceptAdmin', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_addReserves', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_becomeImplementation', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_reduceReserves', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_resignImplementation', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_setCollateralCap', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_setComptroller', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_setInterestRateModel', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_setPendingAdmin', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_setReserveFactor', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'accountCollateralTokens', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'accrualBlockNumber', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'accrueInterest', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'balanceOfUnderlying', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'borrowBalanceCurrent', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'borrowBalanceStored', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'borrowIndex', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'borrowRatePerBlock', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'collateralCap', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'comptroller', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'estimateBorrowRatePerBlockAfterChange', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'estimateSupplyRatePerBlockAfterChange', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'exchangeRateCurrent', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'exchangeRateStored', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'flashFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'flashFeeBips', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'flashLoan', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getAccountSnapshot', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getCash', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'gulp', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'implementation', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'interestRateModel', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'internalCash', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isCToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isCollateralTokenInit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'liquidateBorrow', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'maxFlashLoan', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'pendingAdmin', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'redeemUnderlying', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'registerCollateral', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'repayBorrow', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'repayBorrowBehalf', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'reserveFactorMantissa', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'seize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'supplyRatePerBlock', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalBorrows', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalBorrowsCurrent', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalCollateralTokens', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalReserves', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'underlying', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'unregisterCollateral', data: BytesLike): Result

    events: {
        'AccrueInterest(uint256,uint256,uint256,uint256)': EventFragment
        'Approval(address,address,uint256)': EventFragment
        'Borrow(address,uint256,uint256,uint256)': EventFragment
        'Failure(uint256,uint256,uint256)': EventFragment
        'Flashloan(address,uint256,uint256,uint256)': EventFragment
        'LiquidateBorrow(address,address,uint256,address,uint256)': EventFragment
        'Mint(address,uint256,uint256)': EventFragment
        'NewAdmin(address,address)': EventFragment
        'NewCollateralCap(address,uint256)': EventFragment
        'NewComptroller(address,address)': EventFragment
        'NewMarketInterestRateModel(address,address)': EventFragment
        'NewPendingAdmin(address,address)': EventFragment
        'NewReserveFactor(uint256,uint256)': EventFragment
        'Redeem(address,uint256,uint256)': EventFragment
        'RepayBorrow(address,address,uint256,uint256,uint256)': EventFragment
        'ReservesAdded(address,uint256,uint256)': EventFragment
        'ReservesReduced(address,uint256,uint256)': EventFragment
        'Transfer(address,address,uint256)': EventFragment
        'UserCollateralChanged(address,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'AccrueInterest'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Failure'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Flashloan'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LiquidateBorrow'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NewAdmin'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NewCollateralCap'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NewComptroller'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NewMarketInterestRateModel'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NewPendingAdmin'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NewReserveFactor'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Redeem'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RepayBorrow'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ReservesAdded'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ReservesReduced'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UserCollateralChanged'): EventFragment
}

export type AccrueInterestEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber],
    {
        cashPrior: BigNumber
        interestAccumulated: BigNumber
        borrowIndex: BigNumber
        totalBorrows: BigNumber
    }
>

export type AccrueInterestEventFilter = TypedEventFilter<AccrueInterestEvent>

export type ApprovalEvent = TypedEvent<
    [string, string, BigNumber],
    { owner: string; spender: string; amount: BigNumber }
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export type BorrowEvent = TypedEvent<
    [string, BigNumber, BigNumber, BigNumber],
    {
        borrower: string
        borrowAmount: BigNumber
        accountBorrows: BigNumber
        totalBorrows: BigNumber
    }
>

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>

export type FailureEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber],
    { error: BigNumber; info: BigNumber; detail: BigNumber }
>

export type FailureEventFilter = TypedEventFilter<FailureEvent>

export type FlashloanEvent = TypedEvent<
    [string, BigNumber, BigNumber, BigNumber],
    {
        receiver: string
        amount: BigNumber
        totalFee: BigNumber
        reservesFee: BigNumber
    }
>

export type FlashloanEventFilter = TypedEventFilter<FlashloanEvent>

export type LiquidateBorrowEvent = TypedEvent<
    [string, string, BigNumber, string, BigNumber],
    {
        liquidator: string
        borrower: string
        repayAmount: BigNumber
        cTokenCollateral: string
        seizeTokens: BigNumber
    }
>

export type LiquidateBorrowEventFilter = TypedEventFilter<LiquidateBorrowEvent>

export type MintEvent = TypedEvent<
    [string, BigNumber, BigNumber],
    { minter: string; mintAmount: BigNumber; mintTokens: BigNumber }
>

export type MintEventFilter = TypedEventFilter<MintEvent>

export type NewAdminEvent = TypedEvent<[string, string], { oldAdmin: string; newAdmin: string }>

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>

export type NewCollateralCapEvent = TypedEvent<[string, BigNumber], { token: string; newCap: BigNumber }>

export type NewCollateralCapEventFilter = TypedEventFilter<NewCollateralCapEvent>

export type NewComptrollerEvent = TypedEvent<[string, string], { oldComptroller: string; newComptroller: string }>

export type NewComptrollerEventFilter = TypedEventFilter<NewComptrollerEvent>

export type NewMarketInterestRateModelEvent = TypedEvent<
    [string, string],
    { oldInterestRateModel: string; newInterestRateModel: string }
>

export type NewMarketInterestRateModelEventFilter = TypedEventFilter<NewMarketInterestRateModelEvent>

export type NewPendingAdminEvent = TypedEvent<[string, string], { oldPendingAdmin: string; newPendingAdmin: string }>

export type NewPendingAdminEventFilter = TypedEventFilter<NewPendingAdminEvent>

export type NewReserveFactorEvent = TypedEvent<
    [BigNumber, BigNumber],
    { oldReserveFactorMantissa: BigNumber; newReserveFactorMantissa: BigNumber }
>

export type NewReserveFactorEventFilter = TypedEventFilter<NewReserveFactorEvent>

export type RedeemEvent = TypedEvent<
    [string, BigNumber, BigNumber],
    { redeemer: string; redeemAmount: BigNumber; redeemTokens: BigNumber }
>

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>

export type RepayBorrowEvent = TypedEvent<
    [string, string, BigNumber, BigNumber, BigNumber],
    {
        payer: string
        borrower: string
        repayAmount: BigNumber
        accountBorrows: BigNumber
        totalBorrows: BigNumber
    }
>

export type RepayBorrowEventFilter = TypedEventFilter<RepayBorrowEvent>

export type ReservesAddedEvent = TypedEvent<
    [string, BigNumber, BigNumber],
    { benefactor: string; addAmount: BigNumber; newTotalReserves: BigNumber }
>

export type ReservesAddedEventFilter = TypedEventFilter<ReservesAddedEvent>

export type ReservesReducedEvent = TypedEvent<
    [string, BigNumber, BigNumber],
    { admin: string; reduceAmount: BigNumber; newTotalReserves: BigNumber }
>

export type ReservesReducedEventFilter = TypedEventFilter<ReservesReducedEvent>

export type TransferEvent = TypedEvent<[string, string, BigNumber], { from: string; to: string; amount: BigNumber }>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export type UserCollateralChangedEvent = TypedEvent<
    [string, BigNumber],
    { account: string; newCollateralTokens: BigNumber }
>

export type UserCollateralChangedEventFilter = TypedEventFilter<UserCollateralChangedEvent>

export interface CreamCErc20 extends BaseContract {
    contractName: 'CreamCErc20'
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: CreamCErc20Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        _acceptAdmin(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        _addReserves(
            addAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        _becomeImplementation(
            data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        _reduceReserves(
            reduceAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        _resignImplementation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        _setCollateralCap(
            newCollateralCap: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        _setComptroller(
            newComptroller: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        _setInterestRateModel(
            newInterestRateModel: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        _setPendingAdmin(
            newPendingAdmin: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        _setReserveFactor(
            newReserveFactorMantissa: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        accountCollateralTokens(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

        accrualBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>

        accrueInterest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        admin(overrides?: CallOverrides): Promise<[string]>

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>

        balanceOfUnderlying(
            owner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        borrow(
            borrowAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        borrowBalanceCurrent(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        borrowBalanceStored(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

        borrowIndex(overrides?: CallOverrides): Promise<[BigNumber]>

        borrowRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>

        collateralCap(overrides?: CallOverrides): Promise<[BigNumber]>

        comptroller(overrides?: CallOverrides): Promise<[string]>

        decimals(overrides?: CallOverrides): Promise<[number]>

        estimateBorrowRatePerBlockAfterChange(
            change: BigNumberish,
            repay: boolean,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        estimateSupplyRatePerBlockAfterChange(
            change: BigNumberish,
            repay: boolean,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        exchangeRateCurrent(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        exchangeRateStored(overrides?: CallOverrides): Promise<[BigNumber]>

        flashFee(amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

        flashFeeBips(overrides?: CallOverrides): Promise<[BigNumber]>

        flashLoan(
            receiver: string,
            initiator: string,
            amount: BigNumberish,
            data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        getAccountSnapshot(
            account: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>

        getCash(overrides?: CallOverrides): Promise<[BigNumber]>

        gulp(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        implementation(overrides?: CallOverrides): Promise<[string]>

        'initialize(address,address,address,uint256,string,string,uint8)'(
            underlying_: string,
            comptroller_: string,
            interestRateModel_: string,
            initialExchangeRateMantissa_: BigNumberish,
            name_: string,
            symbol_: string,
            decimals_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'initialize(address,address,uint256,string,string,uint8)'(
            comptroller_: string,
            interestRateModel_: string,
            initialExchangeRateMantissa_: BigNumberish,
            name_: string,
            symbol_: string,
            decimals_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        interestRateModel(overrides?: CallOverrides): Promise<[string]>

        internalCash(overrides?: CallOverrides): Promise<[BigNumber]>

        isCToken(overrides?: CallOverrides): Promise<[boolean]>

        isCollateralTokenInit(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

        liquidateBorrow(
            borrower: string,
            repayAmount: BigNumberish,
            cTokenCollateral: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        maxFlashLoan(overrides?: CallOverrides): Promise<[BigNumber]>

        mint(
            mintAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        name(overrides?: CallOverrides): Promise<[string]>

        pendingAdmin(overrides?: CallOverrides): Promise<[string]>

        redeem(
            redeemTokens: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        redeemUnderlying(
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        registerCollateral(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        repayBorrow(
            repayAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        repayBorrowBehalf(
            borrower: string,
            repayAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        reserveFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>

        seize(
            liquidator: string,
            borrower: string,
            seizeTokens: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        supplyRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>

        symbol(overrides?: CallOverrides): Promise<[string]>

        totalBorrows(overrides?: CallOverrides): Promise<[BigNumber]>

        totalBorrowsCurrent(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        totalCollateralTokens(overrides?: CallOverrides): Promise<[BigNumber]>

        totalReserves(overrides?: CallOverrides): Promise<[BigNumber]>

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

        transfer(
            dst: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        transferFrom(
            src: string,
            dst: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        underlying(overrides?: CallOverrides): Promise<[string]>

        unregisterCollateral(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>
    }

    _acceptAdmin(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    _addReserves(
        addAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    _becomeImplementation(
        data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    _reduceReserves(
        reduceAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    _resignImplementation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    _setCollateralCap(
        newCollateralCap: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    _setComptroller(
        newComptroller: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    _setInterestRateModel(
        newInterestRateModel: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    _setPendingAdmin(
        newPendingAdmin: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    _setReserveFactor(
        newReserveFactorMantissa: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    accountCollateralTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

    accrueInterest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    admin(overrides?: CallOverrides): Promise<string>

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(
        spender: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    balanceOfUnderlying(
        owner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    borrow(
        borrowAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    borrowBalanceCurrent(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    borrowBalanceStored(account: string, overrides?: CallOverrides): Promise<BigNumber>

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>

    collateralCap(overrides?: CallOverrides): Promise<BigNumber>

    comptroller(overrides?: CallOverrides): Promise<string>

    decimals(overrides?: CallOverrides): Promise<number>

    estimateBorrowRatePerBlockAfterChange(
        change: BigNumberish,
        repay: boolean,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    estimateSupplyRatePerBlockAfterChange(
        change: BigNumberish,
        repay: boolean,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    exchangeRateCurrent(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>

    flashFee(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    flashFeeBips(overrides?: CallOverrides): Promise<BigNumber>

    flashLoan(
        receiver: string,
        initiator: string,
        amount: BigNumberish,
        data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getAccountSnapshot(
        account: string,
        overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>

    getCash(overrides?: CallOverrides): Promise<BigNumber>

    gulp(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    implementation(overrides?: CallOverrides): Promise<string>

    'initialize(address,address,address,uint256,string,string,uint8)'(
        underlying_: string,
        comptroller_: string,
        interestRateModel_: string,
        initialExchangeRateMantissa_: BigNumberish,
        name_: string,
        symbol_: string,
        decimals_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'initialize(address,address,uint256,string,string,uint8)'(
        comptroller_: string,
        interestRateModel_: string,
        initialExchangeRateMantissa_: BigNumberish,
        name_: string,
        symbol_: string,
        decimals_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    interestRateModel(overrides?: CallOverrides): Promise<string>

    internalCash(overrides?: CallOverrides): Promise<BigNumber>

    isCToken(overrides?: CallOverrides): Promise<boolean>

    isCollateralTokenInit(arg0: string, overrides?: CallOverrides): Promise<boolean>

    liquidateBorrow(
        borrower: string,
        repayAmount: BigNumberish,
        cTokenCollateral: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    maxFlashLoan(overrides?: CallOverrides): Promise<BigNumber>

    mint(
        mintAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<string>

    pendingAdmin(overrides?: CallOverrides): Promise<string>

    redeem(
        redeemTokens: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    redeemUnderlying(
        redeemAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    registerCollateral(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    repayBorrow(
        repayAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    repayBorrowBehalf(
        borrower: string,
        repayAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>

    seize(
        liquidator: string,
        borrower: string,
        seizeTokens: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<string>

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>

    totalBorrowsCurrent(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    totalCollateralTokens(overrides?: CallOverrides): Promise<BigNumber>

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
        dst: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferFrom(
        src: string,
        dst: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    underlying(overrides?: CallOverrides): Promise<string>

    unregisterCollateral(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        _acceptAdmin(overrides?: CallOverrides): Promise<BigNumber>

        _addReserves(addAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        _becomeImplementation(data: BytesLike, overrides?: CallOverrides): Promise<void>

        _reduceReserves(reduceAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        _resignImplementation(overrides?: CallOverrides): Promise<void>

        _setCollateralCap(newCollateralCap: BigNumberish, overrides?: CallOverrides): Promise<void>

        _setComptroller(newComptroller: string, overrides?: CallOverrides): Promise<BigNumber>

        _setInterestRateModel(newInterestRateModel: string, overrides?: CallOverrides): Promise<BigNumber>

        _setPendingAdmin(newPendingAdmin: string, overrides?: CallOverrides): Promise<BigNumber>

        _setReserveFactor(newReserveFactorMantissa: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        accountCollateralTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

        accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

        accrueInterest(overrides?: CallOverrides): Promise<BigNumber>

        admin(overrides?: CallOverrides): Promise<string>

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

        approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

        balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

        balanceOfUnderlying(owner: string, overrides?: CallOverrides): Promise<BigNumber>

        borrow(borrowAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        borrowBalanceCurrent(account: string, overrides?: CallOverrides): Promise<BigNumber>

        borrowBalanceStored(account: string, overrides?: CallOverrides): Promise<BigNumber>

        borrowIndex(overrides?: CallOverrides): Promise<BigNumber>

        borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>

        collateralCap(overrides?: CallOverrides): Promise<BigNumber>

        comptroller(overrides?: CallOverrides): Promise<string>

        decimals(overrides?: CallOverrides): Promise<number>

        estimateBorrowRatePerBlockAfterChange(
            change: BigNumberish,
            repay: boolean,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        estimateSupplyRatePerBlockAfterChange(
            change: BigNumberish,
            repay: boolean,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>

        exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>

        flashFee(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        flashFeeBips(overrides?: CallOverrides): Promise<BigNumber>

        flashLoan(
            receiver: string,
            initiator: string,
            amount: BigNumberish,
            data: BytesLike,
            overrides?: CallOverrides
        ): Promise<boolean>

        getAccountSnapshot(
            account: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>

        getCash(overrides?: CallOverrides): Promise<BigNumber>

        gulp(overrides?: CallOverrides): Promise<void>

        implementation(overrides?: CallOverrides): Promise<string>

        'initialize(address,address,address,uint256,string,string,uint8)'(
            underlying_: string,
            comptroller_: string,
            interestRateModel_: string,
            initialExchangeRateMantissa_: BigNumberish,
            name_: string,
            symbol_: string,
            decimals_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        'initialize(address,address,uint256,string,string,uint8)'(
            comptroller_: string,
            interestRateModel_: string,
            initialExchangeRateMantissa_: BigNumberish,
            name_: string,
            symbol_: string,
            decimals_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        interestRateModel(overrides?: CallOverrides): Promise<string>

        internalCash(overrides?: CallOverrides): Promise<BigNumber>

        isCToken(overrides?: CallOverrides): Promise<boolean>

        isCollateralTokenInit(arg0: string, overrides?: CallOverrides): Promise<boolean>

        liquidateBorrow(
            borrower: string,
            repayAmount: BigNumberish,
            cTokenCollateral: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        maxFlashLoan(overrides?: CallOverrides): Promise<BigNumber>

        mint(mintAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        name(overrides?: CallOverrides): Promise<string>

        pendingAdmin(overrides?: CallOverrides): Promise<string>

        redeem(redeemTokens: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        redeemUnderlying(redeemAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        registerCollateral(account: string, overrides?: CallOverrides): Promise<BigNumber>

        repayBorrow(repayAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        repayBorrowBehalf(borrower: string, repayAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>

        seize(
            liquidator: string,
            borrower: string,
            seizeTokens: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>

        symbol(overrides?: CallOverrides): Promise<string>

        totalBorrows(overrides?: CallOverrides): Promise<BigNumber>

        totalBorrowsCurrent(overrides?: CallOverrides): Promise<BigNumber>

        totalCollateralTokens(overrides?: CallOverrides): Promise<BigNumber>

        totalReserves(overrides?: CallOverrides): Promise<BigNumber>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        transfer(dst: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

        transferFrom(src: string, dst: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

        underlying(overrides?: CallOverrides): Promise<string>

        unregisterCollateral(account: string, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'AccrueInterest(uint256,uint256,uint256,uint256)'(
            cashPrior?: null,
            interestAccumulated?: null,
            borrowIndex?: null,
            totalBorrows?: null
        ): AccrueInterestEventFilter
        AccrueInterest(
            cashPrior?: null,
            interestAccumulated?: null,
            borrowIndex?: null,
            totalBorrows?: null
        ): AccrueInterestEventFilter

        'Approval(address,address,uint256)'(
            owner?: string | null,
            spender?: string | null,
            amount?: null
        ): ApprovalEventFilter
        Approval(owner?: string | null, spender?: string | null, amount?: null): ApprovalEventFilter

        'Borrow(address,uint256,uint256,uint256)'(
            borrower?: null,
            borrowAmount?: null,
            accountBorrows?: null,
            totalBorrows?: null
        ): BorrowEventFilter
        Borrow(borrower?: null, borrowAmount?: null, accountBorrows?: null, totalBorrows?: null): BorrowEventFilter

        'Failure(uint256,uint256,uint256)'(error?: null, info?: null, detail?: null): FailureEventFilter
        Failure(error?: null, info?: null, detail?: null): FailureEventFilter

        'Flashloan(address,uint256,uint256,uint256)'(
            receiver?: string | null,
            amount?: null,
            totalFee?: null,
            reservesFee?: null
        ): FlashloanEventFilter
        Flashloan(receiver?: string | null, amount?: null, totalFee?: null, reservesFee?: null): FlashloanEventFilter

        'LiquidateBorrow(address,address,uint256,address,uint256)'(
            liquidator?: null,
            borrower?: null,
            repayAmount?: null,
            cTokenCollateral?: null,
            seizeTokens?: null
        ): LiquidateBorrowEventFilter
        LiquidateBorrow(
            liquidator?: null,
            borrower?: null,
            repayAmount?: null,
            cTokenCollateral?: null,
            seizeTokens?: null
        ): LiquidateBorrowEventFilter

        'Mint(address,uint256,uint256)'(minter?: null, mintAmount?: null, mintTokens?: null): MintEventFilter
        Mint(minter?: null, mintAmount?: null, mintTokens?: null): MintEventFilter

        'NewAdmin(address,address)'(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter
        NewAdmin(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter

        'NewCollateralCap(address,uint256)'(token?: null, newCap?: null): NewCollateralCapEventFilter
        NewCollateralCap(token?: null, newCap?: null): NewCollateralCapEventFilter

        'NewComptroller(address,address)'(oldComptroller?: null, newComptroller?: null): NewComptrollerEventFilter
        NewComptroller(oldComptroller?: null, newComptroller?: null): NewComptrollerEventFilter

        'NewMarketInterestRateModel(address,address)'(
            oldInterestRateModel?: null,
            newInterestRateModel?: null
        ): NewMarketInterestRateModelEventFilter
        NewMarketInterestRateModel(
            oldInterestRateModel?: null,
            newInterestRateModel?: null
        ): NewMarketInterestRateModelEventFilter

        'NewPendingAdmin(address,address)'(oldPendingAdmin?: null, newPendingAdmin?: null): NewPendingAdminEventFilter
        NewPendingAdmin(oldPendingAdmin?: null, newPendingAdmin?: null): NewPendingAdminEventFilter

        'NewReserveFactor(uint256,uint256)'(
            oldReserveFactorMantissa?: null,
            newReserveFactorMantissa?: null
        ): NewReserveFactorEventFilter
        NewReserveFactor(oldReserveFactorMantissa?: null, newReserveFactorMantissa?: null): NewReserveFactorEventFilter

        'Redeem(address,uint256,uint256)'(redeemer?: null, redeemAmount?: null, redeemTokens?: null): RedeemEventFilter
        Redeem(redeemer?: null, redeemAmount?: null, redeemTokens?: null): RedeemEventFilter

        'RepayBorrow(address,address,uint256,uint256,uint256)'(
            payer?: null,
            borrower?: null,
            repayAmount?: null,
            accountBorrows?: null,
            totalBorrows?: null
        ): RepayBorrowEventFilter
        RepayBorrow(
            payer?: null,
            borrower?: null,
            repayAmount?: null,
            accountBorrows?: null,
            totalBorrows?: null
        ): RepayBorrowEventFilter

        'ReservesAdded(address,uint256,uint256)'(
            benefactor?: null,
            addAmount?: null,
            newTotalReserves?: null
        ): ReservesAddedEventFilter
        ReservesAdded(benefactor?: null, addAmount?: null, newTotalReserves?: null): ReservesAddedEventFilter

        'ReservesReduced(address,uint256,uint256)'(
            admin?: null,
            reduceAmount?: null,
            newTotalReserves?: null
        ): ReservesReducedEventFilter
        ReservesReduced(admin?: null, reduceAmount?: null, newTotalReserves?: null): ReservesReducedEventFilter

        'Transfer(address,address,uint256)'(
            from?: string | null,
            to?: string | null,
            amount?: null
        ): TransferEventFilter
        Transfer(from?: string | null, to?: string | null, amount?: null): TransferEventFilter

        'UserCollateralChanged(address,uint256)'(
            account?: null,
            newCollateralTokens?: null
        ): UserCollateralChangedEventFilter
        UserCollateralChanged(account?: null, newCollateralTokens?: null): UserCollateralChangedEventFilter
    }

    estimateGas: {
        _acceptAdmin(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        _addReserves(
            addAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        _becomeImplementation(
            data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        _reduceReserves(
            reduceAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        _resignImplementation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        _setCollateralCap(
            newCollateralCap: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        _setComptroller(
            newComptroller: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        _setInterestRateModel(
            newInterestRateModel: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        _setPendingAdmin(
            newPendingAdmin: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        _setReserveFactor(
            newReserveFactorMantissa: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        accountCollateralTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

        accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

        accrueInterest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        admin(overrides?: CallOverrides): Promise<BigNumber>

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

        balanceOfUnderlying(
            owner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        borrow(
            borrowAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        borrowBalanceCurrent(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        borrowBalanceStored(account: string, overrides?: CallOverrides): Promise<BigNumber>

        borrowIndex(overrides?: CallOverrides): Promise<BigNumber>

        borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>

        collateralCap(overrides?: CallOverrides): Promise<BigNumber>

        comptroller(overrides?: CallOverrides): Promise<BigNumber>

        decimals(overrides?: CallOverrides): Promise<BigNumber>

        estimateBorrowRatePerBlockAfterChange(
            change: BigNumberish,
            repay: boolean,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        estimateSupplyRatePerBlockAfterChange(
            change: BigNumberish,
            repay: boolean,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        exchangeRateCurrent(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>

        flashFee(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        flashFeeBips(overrides?: CallOverrides): Promise<BigNumber>

        flashLoan(
            receiver: string,
            initiator: string,
            amount: BigNumberish,
            data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        getAccountSnapshot(account: string, overrides?: CallOverrides): Promise<BigNumber>

        getCash(overrides?: CallOverrides): Promise<BigNumber>

        gulp(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        implementation(overrides?: CallOverrides): Promise<BigNumber>

        'initialize(address,address,address,uint256,string,string,uint8)'(
            underlying_: string,
            comptroller_: string,
            interestRateModel_: string,
            initialExchangeRateMantissa_: BigNumberish,
            name_: string,
            symbol_: string,
            decimals_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'initialize(address,address,uint256,string,string,uint8)'(
            comptroller_: string,
            interestRateModel_: string,
            initialExchangeRateMantissa_: BigNumberish,
            name_: string,
            symbol_: string,
            decimals_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        interestRateModel(overrides?: CallOverrides): Promise<BigNumber>

        internalCash(overrides?: CallOverrides): Promise<BigNumber>

        isCToken(overrides?: CallOverrides): Promise<BigNumber>

        isCollateralTokenInit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

        liquidateBorrow(
            borrower: string,
            repayAmount: BigNumberish,
            cTokenCollateral: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        maxFlashLoan(overrides?: CallOverrides): Promise<BigNumber>

        mint(mintAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        name(overrides?: CallOverrides): Promise<BigNumber>

        pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>

        redeem(
            redeemTokens: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        redeemUnderlying(
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        registerCollateral(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        repayBorrow(
            repayAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        repayBorrowBehalf(
            borrower: string,
            repayAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>

        seize(
            liquidator: string,
            borrower: string,
            seizeTokens: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>

        symbol(overrides?: CallOverrides): Promise<BigNumber>

        totalBorrows(overrides?: CallOverrides): Promise<BigNumber>

        totalBorrowsCurrent(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        totalCollateralTokens(overrides?: CallOverrides): Promise<BigNumber>

        totalReserves(overrides?: CallOverrides): Promise<BigNumber>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        transfer(
            dst: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        transferFrom(
            src: string,
            dst: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        underlying(overrides?: CallOverrides): Promise<BigNumber>

        unregisterCollateral(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        _acceptAdmin(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        _addReserves(
            addAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        _becomeImplementation(
            data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        _reduceReserves(
            reduceAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        _resignImplementation(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        _setCollateralCap(
            newCollateralCap: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        _setComptroller(
            newComptroller: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        _setInterestRateModel(
            newInterestRateModel: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        _setPendingAdmin(
            newPendingAdmin: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        _setReserveFactor(
            newReserveFactorMantissa: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        accountCollateralTokens(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        accrualBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>

        accrueInterest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        admin(overrides?: CallOverrides): Promise<PopulatedTransaction>

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        balanceOfUnderlying(
            owner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        borrow(
            borrowAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        borrowBalanceCurrent(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        borrowBalanceStored(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        borrowIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>

        borrowRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

        collateralCap(overrides?: CallOverrides): Promise<PopulatedTransaction>

        comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

        estimateBorrowRatePerBlockAfterChange(
            change: BigNumberish,
            repay: boolean,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        estimateSupplyRatePerBlockAfterChange(
            change: BigNumberish,
            repay: boolean,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        exchangeRateCurrent(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        exchangeRateStored(overrides?: CallOverrides): Promise<PopulatedTransaction>

        flashFee(amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        flashFeeBips(overrides?: CallOverrides): Promise<PopulatedTransaction>

        flashLoan(
            receiver: string,
            initiator: string,
            amount: BigNumberish,
            data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        getAccountSnapshot(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        getCash(overrides?: CallOverrides): Promise<PopulatedTransaction>

        gulp(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'initialize(address,address,address,uint256,string,string,uint8)'(
            underlying_: string,
            comptroller_: string,
            interestRateModel_: string,
            initialExchangeRateMantissa_: BigNumberish,
            name_: string,
            symbol_: string,
            decimals_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'initialize(address,address,uint256,string,string,uint8)'(
            comptroller_: string,
            interestRateModel_: string,
            initialExchangeRateMantissa_: BigNumberish,
            name_: string,
            symbol_: string,
            decimals_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        interestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>

        internalCash(overrides?: CallOverrides): Promise<PopulatedTransaction>

        isCToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

        isCollateralTokenInit(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        liquidateBorrow(
            borrower: string,
            repayAmount: BigNumberish,
            cTokenCollateral: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        maxFlashLoan(overrides?: CallOverrides): Promise<PopulatedTransaction>

        mint(
            mintAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>

        pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>

        redeem(
            redeemTokens: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        redeemUnderlying(
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        registerCollateral(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        repayBorrow(
            repayAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        repayBorrowBehalf(
            borrower: string,
            repayAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        reserveFactorMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>

        seize(
            liquidator: string,
            borrower: string,
            seizeTokens: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        supplyRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalBorrows(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalBorrowsCurrent(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        totalCollateralTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transfer(
            dst: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        transferFrom(
            src: string,
            dst: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>

        unregisterCollateral(
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>
    }
}
