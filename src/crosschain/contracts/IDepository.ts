/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export declare namespace DepositoryTypes {
    export type DepositStruct = {
        token: string
        amount: BigNumberish
        nonce: BigNumberish
    }

    export type DepositStructOutput = [string, BigNumber, BigNumber] & {
        token: string
        amount: BigNumber
        nonce: BigNumber
    }

    export type UnlockConditionStruct = {
        unlocker: string
        condition: BytesLike
    }

    export type UnlockConditionStructOutput = [string, string] & {
        unlocker: string
        condition: string
    }
}

export interface IDepositoryInterface extends utils.Interface {
    contractName: 'IDepository'
    functions: {
        'depositID((address,uint256,uint256),(address,bytes))': FunctionFragment
        'depositStatus(bytes32)': FunctionFragment
        'lock((address,uint256,uint256),(address,bytes))': FunctionFragment
        'router()': FunctionFragment
        'unlock((address,uint256,uint256),(address,bytes),bytes)': FunctionFragment
    }

    encodeFunctionData(
        functionFragment: 'depositID',
        values: [DepositoryTypes.DepositStruct, DepositoryTypes.UnlockConditionStruct]
    ): string
    encodeFunctionData(functionFragment: 'depositStatus', values: [BytesLike]): string
    encodeFunctionData(
        functionFragment: 'lock',
        values: [DepositoryTypes.DepositStruct, DepositoryTypes.UnlockConditionStruct]
    ): string
    encodeFunctionData(functionFragment: 'router', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'unlock',
        values: [DepositoryTypes.DepositStruct, DepositoryTypes.UnlockConditionStruct, BytesLike]
    ): string

    decodeFunctionResult(functionFragment: 'depositID', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'depositStatus', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lock', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'unlock', data: BytesLike): Result

    events: {
        'DepositLocked(bytes32,tuple,tuple)': EventFragment
        'DepositUnlocked(bytes32)': EventFragment
        'SetRouter(address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'DepositLocked'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'DepositUnlocked'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetRouter'): EventFragment
}

export type DepositLockedEvent = TypedEvent<
    [string, DepositoryTypes.DepositStructOutput, DepositoryTypes.UnlockConditionStructOutput],
    {
        depositID: string
        deposit: DepositoryTypes.DepositStructOutput
        unlocker: DepositoryTypes.UnlockConditionStructOutput
    }
>

export type DepositLockedEventFilter = TypedEventFilter<DepositLockedEvent>

export type DepositUnlockedEvent = TypedEvent<[string], { depositID: string }>

export type DepositUnlockedEventFilter = TypedEventFilter<DepositUnlockedEvent>

export type SetRouterEvent = TypedEvent<[string, string], { oldRouter: string; newRouter: string }>

export type SetRouterEventFilter = TypedEventFilter<SetRouterEvent>

export interface IDepository extends BaseContract {
    contractName: 'IDepository'
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IDepositoryInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        depositID(
            depository: DepositoryTypes.DepositStruct,
            condition: DepositoryTypes.UnlockConditionStruct,
            overrides?: CallOverrides
        ): Promise<[string]>

        depositStatus(depositID: BytesLike, overrides?: CallOverrides): Promise<[boolean]>

        lock(
            deposit: DepositoryTypes.DepositStruct,
            condition: DepositoryTypes.UnlockConditionStruct,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        router(overrides?: CallOverrides): Promise<[string]>

        unlock(
            deposit: DepositoryTypes.DepositStruct,
            condition: DepositoryTypes.UnlockConditionStruct,
            solution: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>
    }

    depositID(
        depository: DepositoryTypes.DepositStruct,
        condition: DepositoryTypes.UnlockConditionStruct,
        overrides?: CallOverrides
    ): Promise<string>

    depositStatus(depositID: BytesLike, overrides?: CallOverrides): Promise<boolean>

    lock(
        deposit: DepositoryTypes.DepositStruct,
        condition: DepositoryTypes.UnlockConditionStruct,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    router(overrides?: CallOverrides): Promise<string>

    unlock(
        deposit: DepositoryTypes.DepositStruct,
        condition: DepositoryTypes.UnlockConditionStruct,
        solution: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        depositID(
            depository: DepositoryTypes.DepositStruct,
            condition: DepositoryTypes.UnlockConditionStruct,
            overrides?: CallOverrides
        ): Promise<string>

        depositStatus(depositID: BytesLike, overrides?: CallOverrides): Promise<boolean>

        lock(
            deposit: DepositoryTypes.DepositStruct,
            condition: DepositoryTypes.UnlockConditionStruct,
            overrides?: CallOverrides
        ): Promise<void>

        router(overrides?: CallOverrides): Promise<string>

        unlock(
            deposit: DepositoryTypes.DepositStruct,
            condition: DepositoryTypes.UnlockConditionStruct,
            solution: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'DepositLocked(bytes32,tuple,tuple)'(
            depositID?: BytesLike | null,
            deposit?: null,
            unlocker?: null
        ): DepositLockedEventFilter
        DepositLocked(depositID?: BytesLike | null, deposit?: null, unlocker?: null): DepositLockedEventFilter

        'DepositUnlocked(bytes32)'(depositID?: BytesLike | null): DepositUnlockedEventFilter
        DepositUnlocked(depositID?: BytesLike | null): DepositUnlockedEventFilter

        'SetRouter(address,address)'(oldRouter?: string | null, newRouter?: string | null): SetRouterEventFilter
        SetRouter(oldRouter?: string | null, newRouter?: string | null): SetRouterEventFilter
    }

    estimateGas: {
        depositID(
            depository: DepositoryTypes.DepositStruct,
            condition: DepositoryTypes.UnlockConditionStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        depositStatus(depositID: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

        lock(
            deposit: DepositoryTypes.DepositStruct,
            condition: DepositoryTypes.UnlockConditionStruct,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        router(overrides?: CallOverrides): Promise<BigNumber>

        unlock(
            deposit: DepositoryTypes.DepositStruct,
            condition: DepositoryTypes.UnlockConditionStruct,
            solution: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        depositID(
            depository: DepositoryTypes.DepositStruct,
            condition: DepositoryTypes.UnlockConditionStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        depositStatus(depositID: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

        lock(
            deposit: DepositoryTypes.DepositStruct,
            condition: DepositoryTypes.UnlockConditionStruct,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        router(overrides?: CallOverrides): Promise<PopulatedTransaction>

        unlock(
            deposit: DepositoryTypes.DepositStruct,
            condition: DepositoryTypes.UnlockConditionStruct,
            solution: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>
    }
}
