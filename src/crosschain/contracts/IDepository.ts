/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import { FunctionFragment, Result } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export declare namespace DepositoryTypes {
    export type DepositStruct = {
        token: string
        amount: BigNumberish
        nonce: BigNumberish
    }

    export type DepositStructOutput = [string, BigNumber, BigNumber] & {
        token: string
        amount: BigNumber
        nonce: BigNumber
    }

    export type UnlockerStruct = { unlocker: string; condition: BytesLike }

    export type UnlockerStructOutput = [string, string] & {
        unlocker: string
        condition: string
    }
}

export interface IDepositoryInterface extends utils.Interface {
    contractName: 'IDepository'
    functions: {
        'depositID((address,uint256,uint256),(address,bytes))': FunctionFragment
        'lock((address,uint256,uint256),(address,bytes))': FunctionFragment
        'unlock((address,uint256,uint256),(address,bytes),bytes)': FunctionFragment
    }

    encodeFunctionData(
        functionFragment: 'depositID',
        values: [DepositoryTypes.DepositStruct, DepositoryTypes.UnlockerStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'lock',
        values: [DepositoryTypes.DepositStruct, DepositoryTypes.UnlockerStruct]
    ): string
    encodeFunctionData(
        functionFragment: 'unlock',
        values: [DepositoryTypes.DepositStruct, DepositoryTypes.UnlockerStruct, BytesLike]
    ): string

    decodeFunctionResult(functionFragment: 'depositID', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lock', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'unlock', data: BytesLike): Result

    events: {}
}

export interface IDepository extends BaseContract {
    contractName: 'IDepository'
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IDepositoryInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        depositID(
            d: DepositoryTypes.DepositStruct,
            u: DepositoryTypes.UnlockerStruct,
            overrides?: CallOverrides
        ): Promise<[string]>

        lock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        unlock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            solution: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>
    }

    depositID(
        d: DepositoryTypes.DepositStruct,
        u: DepositoryTypes.UnlockerStruct,
        overrides?: CallOverrides
    ): Promise<string>

    lock(
        deposit: DepositoryTypes.DepositStruct,
        unlocker: DepositoryTypes.UnlockerStruct,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unlock(
        deposit: DepositoryTypes.DepositStruct,
        unlocker: DepositoryTypes.UnlockerStruct,
        solution: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        depositID(
            d: DepositoryTypes.DepositStruct,
            u: DepositoryTypes.UnlockerStruct,
            overrides?: CallOverrides
        ): Promise<string>

        lock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            overrides?: CallOverrides
        ): Promise<void>

        unlock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            solution: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {}

    estimateGas: {
        depositID(
            d: DepositoryTypes.DepositStruct,
            u: DepositoryTypes.UnlockerStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        lock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        unlock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            solution: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        depositID(
            d: DepositoryTypes.DepositStruct,
            u: DepositoryTypes.UnlockerStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        lock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        unlock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            solution: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>
    }
}
