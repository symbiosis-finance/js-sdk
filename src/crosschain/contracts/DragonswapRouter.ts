/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import { FunctionFragment, Result } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export interface DragonswapRouterInterface extends utils.Interface {
    contractName: 'DragonswapRouter'
    functions: {
        'WSEI()': FunctionFragment
        'addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)': FunctionFragment
        'addLiquiditySEI(address,uint256,uint256,uint256,address,uint256)': FunctionFragment
        'factory()': FunctionFragment
        'getAmountIn(uint256,uint256,uint256)': FunctionFragment
        'getAmountOut(uint256,uint256,uint256)': FunctionFragment
        'getAmountsIn(uint256,address[])': FunctionFragment
        'getAmountsOut(uint256,address[])': FunctionFragment
        'quote(uint256,uint256,uint256)': FunctionFragment
        'removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)': FunctionFragment
        'removeLiquiditySEI(address,uint256,uint256,uint256,address,uint256)': FunctionFragment
        'removeLiquiditySEISupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)': FunctionFragment
        'removeLiquiditySEIWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)': FunctionFragment
        'removeLiquiditySEIWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)': FunctionFragment
        'removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)': FunctionFragment
        'swapExactSEIForTokens(uint256,address[],address,uint256)': FunctionFragment
        'swapExactSEIForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)': FunctionFragment
        'swapExactTokensForSEI(uint256,uint256,address[],address,uint256)': FunctionFragment
        'swapExactTokensForSEISupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)': FunctionFragment
        'swapExactTokensForTokens(uint256,uint256,address[],address,uint256)': FunctionFragment
        'swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)': FunctionFragment
        'swapSEIForExactTokens(uint256,address[],address,uint256)': FunctionFragment
        'swapTokensForExactSEI(uint256,uint256,address[],address,uint256)': FunctionFragment
        'swapTokensForExactTokens(uint256,uint256,address[],address,uint256)': FunctionFragment
    }

    encodeFunctionData(functionFragment: 'WSEI', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'addLiquidity',
        values: [string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'addLiquiditySEI',
        values: [string, BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
    ): string
    encodeFunctionData(functionFragment: 'factory', values?: undefined): string
    encodeFunctionData(functionFragment: 'getAmountIn', values: [BigNumberish, BigNumberish, BigNumberish]): string
    encodeFunctionData(functionFragment: 'getAmountOut', values: [BigNumberish, BigNumberish, BigNumberish]): string
    encodeFunctionData(functionFragment: 'getAmountsIn', values: [BigNumberish, string[]]): string
    encodeFunctionData(functionFragment: 'getAmountsOut', values: [BigNumberish, string[]]): string
    encodeFunctionData(functionFragment: 'quote', values: [BigNumberish, BigNumberish, BigNumberish]): string
    encodeFunctionData(
        functionFragment: 'removeLiquidity',
        values: [string, string, BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'removeLiquiditySEI',
        values: [string, BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'removeLiquiditySEISupportingFeeOnTransferTokens',
        values: [string, BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'removeLiquiditySEIWithPermit',
        values: [
            string,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            string,
            BigNumberish,
            boolean,
            BigNumberish,
            BytesLike,
            BytesLike
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'removeLiquiditySEIWithPermitSupportingFeeOnTransferTokens',
        values: [
            string,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            string,
            BigNumberish,
            boolean,
            BigNumberish,
            BytesLike,
            BytesLike
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'removeLiquidityWithPermit',
        values: [
            string,
            string,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            string,
            BigNumberish,
            boolean,
            BigNumberish,
            BytesLike,
            BytesLike
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'swapExactSEIForTokens',
        values: [BigNumberish, string[], string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'swapExactSEIForTokensSupportingFeeOnTransferTokens',
        values: [BigNumberish, string[], string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'swapExactTokensForSEI',
        values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'swapExactTokensForSEISupportingFeeOnTransferTokens',
        values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'swapExactTokensForTokens',
        values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
        values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'swapSEIForExactTokens',
        values: [BigNumberish, string[], string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'swapTokensForExactSEI',
        values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'swapTokensForExactTokens',
        values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
    ): string

    decodeFunctionResult(functionFragment: 'WSEI', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'addLiquidity', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'addLiquiditySEI', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getAmountIn', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getAmountOut', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getAmountsIn', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getAmountsOut', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'removeLiquidity', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'removeLiquiditySEI', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'removeLiquiditySEISupportingFeeOnTransferTokens', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'removeLiquiditySEIWithPermit', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'removeLiquiditySEIWithPermitSupportingFeeOnTransferTokens',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'removeLiquidityWithPermit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'swapExactSEIForTokens', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'swapExactSEIForTokensSupportingFeeOnTransferTokens',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'swapExactTokensForSEI', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'swapExactTokensForSEISupportingFeeOnTransferTokens',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'swapExactTokensForTokens', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'swapSEIForExactTokens', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'swapTokensForExactSEI', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'swapTokensForExactTokens', data: BytesLike): Result

    events: {}
}

export interface DragonswapRouter extends BaseContract {
    contractName: 'DragonswapRouter'
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: DragonswapRouterInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        WSEI(overrides?: CallOverrides): Promise<[string]>

        addLiquidity(
            tokenA: string,
            tokenB: string,
            amountADesired: BigNumberish,
            amountBDesired: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        addLiquiditySEI(
            token: string,
            amountTokenDesired: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        factory(overrides?: CallOverrides): Promise<[string]>

        getAmountIn(
            amountOut: BigNumberish,
            reserveIn: BigNumberish,
            reserveOut: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { amountIn: BigNumber }>

        getAmountOut(
            amountIn: BigNumberish,
            reserveIn: BigNumberish,
            reserveOut: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { amountOut: BigNumber }>

        getAmountsIn(
            amountOut: BigNumberish,
            path: string[],
            overrides?: CallOverrides
        ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>

        getAmountsOut(
            amountIn: BigNumberish,
            path: string[],
            overrides?: CallOverrides
        ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>

        quote(
            amountA: BigNumberish,
            reserveA: BigNumberish,
            reserveB: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { amountB: BigNumber }>

        removeLiquidity(
            tokenA: string,
            tokenB: string,
            liquidity: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        removeLiquiditySEI(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        removeLiquiditySEISupportingFeeOnTransferTokens(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        removeLiquiditySEIWithPermit(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        removeLiquiditySEIWithPermitSupportingFeeOnTransferTokens(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        removeLiquidityWithPermit(
            tokenA: string,
            tokenB: string,
            liquidity: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        swapExactSEIForTokens(
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        swapExactSEIForTokensSupportingFeeOnTransferTokens(
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        swapExactTokensForSEI(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        swapExactTokensForSEISupportingFeeOnTransferTokens(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        swapExactTokensForTokens(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        swapSEIForExactTokens(
            amountOut: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        swapTokensForExactSEI(
            amountOut: BigNumberish,
            amountInMax: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        swapTokensForExactTokens(
            amountOut: BigNumberish,
            amountInMax: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>
    }

    WSEI(overrides?: CallOverrides): Promise<string>

    addLiquidity(
        tokenA: string,
        tokenB: string,
        amountADesired: BigNumberish,
        amountBDesired: BigNumberish,
        amountAMin: BigNumberish,
        amountBMin: BigNumberish,
        to: string,
        deadline: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    addLiquiditySEI(
        token: string,
        amountTokenDesired: BigNumberish,
        amountTokenMin: BigNumberish,
        amountSEIMin: BigNumberish,
        to: string,
        deadline: BigNumberish,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    factory(overrides?: CallOverrides): Promise<string>

    getAmountIn(
        amountOut: BigNumberish,
        reserveIn: BigNumberish,
        reserveOut: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountOut(
        amountIn: BigNumberish,
        reserveIn: BigNumberish,
        reserveOut: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountsIn(amountOut: BigNumberish, path: string[], overrides?: CallOverrides): Promise<BigNumber[]>

    getAmountsOut(amountIn: BigNumberish, path: string[], overrides?: CallOverrides): Promise<BigNumber[]>

    quote(
        amountA: BigNumberish,
        reserveA: BigNumberish,
        reserveB: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    removeLiquidity(
        tokenA: string,
        tokenB: string,
        liquidity: BigNumberish,
        amountAMin: BigNumberish,
        amountBMin: BigNumberish,
        to: string,
        deadline: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeLiquiditySEI(
        token: string,
        liquidity: BigNumberish,
        amountTokenMin: BigNumberish,
        amountSEIMin: BigNumberish,
        to: string,
        deadline: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeLiquiditySEISupportingFeeOnTransferTokens(
        token: string,
        liquidity: BigNumberish,
        amountTokenMin: BigNumberish,
        amountSEIMin: BigNumberish,
        to: string,
        deadline: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeLiquiditySEIWithPermit(
        token: string,
        liquidity: BigNumberish,
        amountTokenMin: BigNumberish,
        amountSEIMin: BigNumberish,
        to: string,
        deadline: BigNumberish,
        approveMax: boolean,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeLiquiditySEIWithPermitSupportingFeeOnTransferTokens(
        token: string,
        liquidity: BigNumberish,
        amountTokenMin: BigNumberish,
        amountSEIMin: BigNumberish,
        to: string,
        deadline: BigNumberish,
        approveMax: boolean,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeLiquidityWithPermit(
        tokenA: string,
        tokenB: string,
        liquidity: BigNumberish,
        amountAMin: BigNumberish,
        amountBMin: BigNumberish,
        to: string,
        deadline: BigNumberish,
        approveMax: boolean,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactSEIForTokens(
        amountOutMin: BigNumberish,
        path: string[],
        to: string,
        deadline: BigNumberish,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactSEIForTokensSupportingFeeOnTransferTokens(
        amountOutMin: BigNumberish,
        path: string[],
        to: string,
        deadline: BigNumberish,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForSEI(
        amountIn: BigNumberish,
        amountOutMin: BigNumberish,
        path: string[],
        to: string,
        deadline: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForSEISupportingFeeOnTransferTokens(
        amountIn: BigNumberish,
        amountOutMin: BigNumberish,
        path: string[],
        to: string,
        deadline: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForTokens(
        amountIn: BigNumberish,
        amountOutMin: BigNumberish,
        path: string[],
        to: string,
        deadline: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
        amountIn: BigNumberish,
        amountOutMin: BigNumberish,
        path: string[],
        to: string,
        deadline: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapSEIForExactTokens(
        amountOut: BigNumberish,
        path: string[],
        to: string,
        deadline: BigNumberish,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapTokensForExactSEI(
        amountOut: BigNumberish,
        amountInMax: BigNumberish,
        path: string[],
        to: string,
        deadline: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapTokensForExactTokens(
        amountOut: BigNumberish,
        amountInMax: BigNumberish,
        path: string[],
        to: string,
        deadline: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        WSEI(overrides?: CallOverrides): Promise<string>

        addLiquidity(
            tokenA: string,
            tokenB: string,
            amountADesired: BigNumberish,
            amountBDesired: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber] & {
                amountA: BigNumber
                amountB: BigNumber
                liquidity: BigNumber
            }
        >

        addLiquiditySEI(
            token: string,
            amountTokenDesired: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber] & {
                amountToken: BigNumber
                amountSEI: BigNumber
                liquidity: BigNumber
            }
        >

        factory(overrides?: CallOverrides): Promise<string>

        getAmountIn(
            amountOut: BigNumberish,
            reserveIn: BigNumberish,
            reserveOut: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getAmountOut(
            amountIn: BigNumberish,
            reserveIn: BigNumberish,
            reserveOut: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getAmountsIn(amountOut: BigNumberish, path: string[], overrides?: CallOverrides): Promise<BigNumber[]>

        getAmountsOut(amountIn: BigNumberish, path: string[], overrides?: CallOverrides): Promise<BigNumber[]>

        quote(
            amountA: BigNumberish,
            reserveA: BigNumberish,
            reserveB: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        removeLiquidity(
            tokenA: string,
            tokenB: string,
            liquidity: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }>

        removeLiquiditySEI(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { amountToken: BigNumber; amountSEI: BigNumber }>

        removeLiquiditySEISupportingFeeOnTransferTokens(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        removeLiquiditySEIWithPermit(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { amountToken: BigNumber; amountSEI: BigNumber }>

        removeLiquiditySEIWithPermitSupportingFeeOnTransferTokens(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        removeLiquidityWithPermit(
            tokenA: string,
            tokenB: string,
            liquidity: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }>

        swapExactSEIForTokens(
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber[]>

        swapExactSEIForTokensSupportingFeeOnTransferTokens(
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        swapExactTokensForSEI(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber[]>

        swapExactTokensForSEISupportingFeeOnTransferTokens(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        swapExactTokensForTokens(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber[]>

        swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        swapSEIForExactTokens(
            amountOut: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber[]>

        swapTokensForExactSEI(
            amountOut: BigNumberish,
            amountInMax: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber[]>

        swapTokensForExactTokens(
            amountOut: BigNumberish,
            amountInMax: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber[]>
    }

    filters: {}

    estimateGas: {
        WSEI(overrides?: CallOverrides): Promise<BigNumber>

        addLiquidity(
            tokenA: string,
            tokenB: string,
            amountADesired: BigNumberish,
            amountBDesired: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        addLiquiditySEI(
            token: string,
            amountTokenDesired: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        factory(overrides?: CallOverrides): Promise<BigNumber>

        getAmountIn(
            amountOut: BigNumberish,
            reserveIn: BigNumberish,
            reserveOut: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getAmountOut(
            amountIn: BigNumberish,
            reserveIn: BigNumberish,
            reserveOut: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getAmountsIn(amountOut: BigNumberish, path: string[], overrides?: CallOverrides): Promise<BigNumber>

        getAmountsOut(amountIn: BigNumberish, path: string[], overrides?: CallOverrides): Promise<BigNumber>

        quote(
            amountA: BigNumberish,
            reserveA: BigNumberish,
            reserveB: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        removeLiquidity(
            tokenA: string,
            tokenB: string,
            liquidity: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        removeLiquiditySEI(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        removeLiquiditySEISupportingFeeOnTransferTokens(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        removeLiquiditySEIWithPermit(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        removeLiquiditySEIWithPermitSupportingFeeOnTransferTokens(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        removeLiquidityWithPermit(
            tokenA: string,
            tokenB: string,
            liquidity: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        swapExactSEIForTokens(
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        swapExactSEIForTokensSupportingFeeOnTransferTokens(
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        swapExactTokensForSEI(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        swapExactTokensForSEISupportingFeeOnTransferTokens(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        swapExactTokensForTokens(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        swapSEIForExactTokens(
            amountOut: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        swapTokensForExactSEI(
            amountOut: BigNumberish,
            amountInMax: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        swapTokensForExactTokens(
            amountOut: BigNumberish,
            amountInMax: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        WSEI(overrides?: CallOverrides): Promise<PopulatedTransaction>

        addLiquidity(
            tokenA: string,
            tokenB: string,
            amountADesired: BigNumberish,
            amountBDesired: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        addLiquiditySEI(
            token: string,
            amountTokenDesired: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getAmountIn(
            amountOut: BigNumberish,
            reserveIn: BigNumberish,
            reserveOut: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getAmountOut(
            amountIn: BigNumberish,
            reserveIn: BigNumberish,
            reserveOut: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getAmountsIn(amountOut: BigNumberish, path: string[], overrides?: CallOverrides): Promise<PopulatedTransaction>

        getAmountsOut(amountIn: BigNumberish, path: string[], overrides?: CallOverrides): Promise<PopulatedTransaction>

        quote(
            amountA: BigNumberish,
            reserveA: BigNumberish,
            reserveB: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        removeLiquidity(
            tokenA: string,
            tokenB: string,
            liquidity: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        removeLiquiditySEI(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        removeLiquiditySEISupportingFeeOnTransferTokens(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        removeLiquiditySEIWithPermit(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        removeLiquiditySEIWithPermitSupportingFeeOnTransferTokens(
            token: string,
            liquidity: BigNumberish,
            amountTokenMin: BigNumberish,
            amountSEIMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        removeLiquidityWithPermit(
            tokenA: string,
            tokenB: string,
            liquidity: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: string,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        swapExactSEIForTokens(
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        swapExactSEIForTokensSupportingFeeOnTransferTokens(
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        swapExactTokensForSEI(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        swapExactTokensForSEISupportingFeeOnTransferTokens(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        swapExactTokensForTokens(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        swapSEIForExactTokens(
            amountOut: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        swapTokensForExactSEI(
            amountOut: BigNumberish,
            amountInMax: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        swapTokensForExactTokens(
            amountOut: BigNumberish,
            amountInMax: BigNumberish,
            path: string[],
            to: string,
            deadline: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>
    }
}
