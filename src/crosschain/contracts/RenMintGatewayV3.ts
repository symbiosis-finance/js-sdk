/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export interface RenMintGatewayV3Interface extends utils.Interface {
    contractName: 'RenMintGatewayV3'
    functions: {
        'NAME()': FunctionFragment
        '__GatewayStateManager_init(string,address,address)': FunctionFragment
        '__MintGateway_init(string,address,address)': FunctionFragment
        '_burnFromPreviousGateway(string,string,bytes,uint256,address)': FunctionFragment
        '_mintFromPreviousGateway(bytes32,uint256,bytes32,bytes,address)': FunctionFragment
        'burn(bytes,uint256)': FunctionFragment
        'burnWithPayload(string,string,bytes,uint256)': FunctionFragment
        'getAsset()': FunctionFragment
        'getEventNonce()': FunctionFragment
        'getPreviousGateway()': FunctionFragment
        'getSelectorHash()': FunctionFragment
        'getSignatureVerifier()': FunctionFragment
        'getToken()': FunctionFragment
        'mint(bytes32,uint256,bytes32,bytes)': FunctionFragment
        'owner()': FunctionFragment
        'status(bytes32)': FunctionFragment
        'token()': FunctionFragment
        'transferTokenOwnership(address)': FunctionFragment
        'updateAsset(string)': FunctionFragment
        'updatePreviousGateway(address)': FunctionFragment
        'updateSignatureVerifier(address)': FunctionFragment
        'updateToken(address)': FunctionFragment
    }

    encodeFunctionData(functionFragment: 'NAME', values?: undefined): string
    encodeFunctionData(functionFragment: '__GatewayStateManager_init', values: [string, string, string]): string
    encodeFunctionData(functionFragment: '__MintGateway_init', values: [string, string, string]): string
    encodeFunctionData(
        functionFragment: '_burnFromPreviousGateway',
        values: [string, string, BytesLike, BigNumberish, string]
    ): string
    encodeFunctionData(
        functionFragment: '_mintFromPreviousGateway',
        values: [BytesLike, BigNumberish, BytesLike, BytesLike, string]
    ): string
    encodeFunctionData(functionFragment: 'burn', values: [BytesLike, BigNumberish]): string
    encodeFunctionData(functionFragment: 'burnWithPayload', values: [string, string, BytesLike, BigNumberish]): string
    encodeFunctionData(functionFragment: 'getAsset', values?: undefined): string
    encodeFunctionData(functionFragment: 'getEventNonce', values?: undefined): string
    encodeFunctionData(functionFragment: 'getPreviousGateway', values?: undefined): string
    encodeFunctionData(functionFragment: 'getSelectorHash', values?: undefined): string
    encodeFunctionData(functionFragment: 'getSignatureVerifier', values?: undefined): string
    encodeFunctionData(functionFragment: 'getToken', values?: undefined): string
    encodeFunctionData(functionFragment: 'mint', values: [BytesLike, BigNumberish, BytesLike, BytesLike]): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'status', values: [BytesLike]): string
    encodeFunctionData(functionFragment: 'token', values?: undefined): string
    encodeFunctionData(functionFragment: 'transferTokenOwnership', values: [string]): string
    encodeFunctionData(functionFragment: 'updateAsset', values: [string]): string
    encodeFunctionData(functionFragment: 'updatePreviousGateway', values: [string]): string
    encodeFunctionData(functionFragment: 'updateSignatureVerifier', values: [string]): string
    encodeFunctionData(functionFragment: 'updateToken', values: [string]): string

    decodeFunctionResult(functionFragment: 'NAME', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '__GatewayStateManager_init', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '__MintGateway_init', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_burnFromPreviousGateway', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_mintFromPreviousGateway', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'burnWithPayload', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getAsset', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getEventNonce', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getPreviousGateway', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getSelectorHash', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getSignatureVerifier', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'status', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferTokenOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updateAsset', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updatePreviousGateway', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updateSignatureVerifier', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updateToken', data: BytesLike): Result

    events: {
        'LogAssetUpdated(string,bytes32)': EventFragment
        'LogBurn(bytes,uint256,uint256,bytes)': EventFragment
        'LogBurnToChain(string,string,bytes,uint256,uint256,string,string)': EventFragment
        'LogMint(address,uint256,uint256,bytes32)': EventFragment
        'LogPreviousGatewayUpdated(address,address)': EventFragment
        'LogSignatureVerifierUpdated(address,address)': EventFragment
        'LogTokenUpdated(address)': EventFragment
        'TokenOwnershipTransferred(address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'LogAssetUpdated'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LogBurn'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LogBurnToChain'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LogMint'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LogPreviousGatewayUpdated'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LogSignatureVerifierUpdated'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LogTokenUpdated'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'TokenOwnershipTransferred'): EventFragment
}

export type LogAssetUpdatedEvent = TypedEvent<[string, string], { asset: string; selectorHash: string }>

export type LogAssetUpdatedEventFilter = TypedEventFilter<LogAssetUpdatedEvent>

export type LogBurnEvent = TypedEvent<
    [string, BigNumber, BigNumber, string],
    { to: string; amount: BigNumber; burnNonce: BigNumber; indexedTo: string }
>

export type LogBurnEventFilter = TypedEventFilter<LogBurnEvent>

export type LogBurnToChainEvent = TypedEvent<
    [string, string, string, BigNumber, BigNumber, string, string],
    {
        recipientAddress: string
        recipientChain: string
        recipientPayload: string
        amount: BigNumber
        burnNonce: BigNumber
        recipientAddressIndexed: string
        recipientChainIndexed: string
    }
>

export type LogBurnToChainEventFilter = TypedEventFilter<LogBurnToChainEvent>

export type LogMintEvent = TypedEvent<
    [string, BigNumber, BigNumber, string],
    { to: string; amount: BigNumber; sigHash: BigNumber; nHash: string }
>

export type LogMintEventFilter = TypedEventFilter<LogMintEvent>

export type LogPreviousGatewayUpdatedEvent = TypedEvent<
    [string, string],
    { oldPreviousGateway: string; newPreviousGateway: string }
>

export type LogPreviousGatewayUpdatedEventFilter = TypedEventFilter<LogPreviousGatewayUpdatedEvent>

export type LogSignatureVerifierUpdatedEvent = TypedEvent<
    [string, string],
    { oldSignatureVerifier: string; newSignatureVerifier: string }
>

export type LogSignatureVerifierUpdatedEventFilter = TypedEventFilter<LogSignatureVerifierUpdatedEvent>

export type LogTokenUpdatedEvent = TypedEvent<[string], { token: string }>

export type LogTokenUpdatedEventFilter = TypedEventFilter<LogTokenUpdatedEvent>

export type TokenOwnershipTransferredEvent = TypedEvent<
    [string, string],
    { tokenAddress: string; nextTokenOwner: string }
>

export type TokenOwnershipTransferredEventFilter = TypedEventFilter<TokenOwnershipTransferredEvent>

export interface RenMintGatewayV3 extends BaseContract {
    contractName: 'RenMintGatewayV3'
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: RenMintGatewayV3Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        NAME(overrides?: CallOverrides): Promise<[string]>

        __GatewayStateManager_init(
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        __MintGateway_init(
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        _burnFromPreviousGateway(
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            caller: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        _mintFromPreviousGateway(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            caller: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'burn(bytes,uint256)'(
            recipient: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'burn(string,uint256)'(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        burnWithPayload(
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        getAsset(overrides?: CallOverrides): Promise<[string]>

        getEventNonce(overrides?: CallOverrides): Promise<[BigNumber]>

        getPreviousGateway(overrides?: CallOverrides): Promise<[string]>

        getSelectorHash(overrides?: CallOverrides): Promise<[string]>

        getSignatureVerifier(overrides?: CallOverrides): Promise<[string]>

        getToken(overrides?: CallOverrides): Promise<[string]>

        mint(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        owner(overrides?: CallOverrides): Promise<[string]>

        status(hash: BytesLike, overrides?: CallOverrides): Promise<[boolean]>

        token(overrides?: CallOverrides): Promise<[string]>

        transferTokenOwnership(
            nextTokenOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        updateAsset(
            nextAsset: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        updatePreviousGateway(
            newPreviousGateway: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        updateSignatureVerifier(
            newSignatureVerifier: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        updateToken(
            newToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>
    }

    NAME(overrides?: CallOverrides): Promise<string>

    __GatewayStateManager_init(
        asset_: string,
        signatureVerifier_: string,
        token_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    __MintGateway_init(
        asset_: string,
        signatureVerifier_: string,
        token_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    _burnFromPreviousGateway(
        recipientAddress: string,
        recipientChain: string,
        recipientPayload: BytesLike,
        amount: BigNumberish,
        caller: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    _mintFromPreviousGateway(
        pHash: BytesLike,
        amount: BigNumberish,
        nHash: BytesLike,
        sig: BytesLike,
        caller: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'burn(bytes,uint256)'(
        recipient: BytesLike,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'burn(string,uint256)'(
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    burnWithPayload(
        recipientAddress: string,
        recipientChain: string,
        recipientPayload: BytesLike,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getAsset(overrides?: CallOverrides): Promise<string>

    getEventNonce(overrides?: CallOverrides): Promise<BigNumber>

    getPreviousGateway(overrides?: CallOverrides): Promise<string>

    getSelectorHash(overrides?: CallOverrides): Promise<string>

    getSignatureVerifier(overrides?: CallOverrides): Promise<string>

    getToken(overrides?: CallOverrides): Promise<string>

    mint(
        pHash: BytesLike,
        amount: BigNumberish,
        nHash: BytesLike,
        sig: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<string>

    status(hash: BytesLike, overrides?: CallOverrides): Promise<boolean>

    token(overrides?: CallOverrides): Promise<string>

    transferTokenOwnership(
        nextTokenOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateAsset(
        nextAsset: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updatePreviousGateway(
        newPreviousGateway: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateSignatureVerifier(
        newSignatureVerifier: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateToken(
        newToken: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        NAME(overrides?: CallOverrides): Promise<string>

        __GatewayStateManager_init(
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: CallOverrides
        ): Promise<void>

        __MintGateway_init(
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: CallOverrides
        ): Promise<void>

        _burnFromPreviousGateway(
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            caller: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        _mintFromPreviousGateway(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            caller: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'burn(bytes,uint256)'(recipient: BytesLike, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'burn(string,uint256)'(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        burnWithPayload(
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getAsset(overrides?: CallOverrides): Promise<string>

        getEventNonce(overrides?: CallOverrides): Promise<BigNumber>

        getPreviousGateway(overrides?: CallOverrides): Promise<string>

        getSelectorHash(overrides?: CallOverrides): Promise<string>

        getSignatureVerifier(overrides?: CallOverrides): Promise<string>

        getToken(overrides?: CallOverrides): Promise<string>

        mint(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<string>

        status(hash: BytesLike, overrides?: CallOverrides): Promise<boolean>

        token(overrides?: CallOverrides): Promise<string>

        transferTokenOwnership(nextTokenOwner: string, overrides?: CallOverrides): Promise<void>

        updateAsset(nextAsset: string, overrides?: CallOverrides): Promise<void>

        updatePreviousGateway(newPreviousGateway: string, overrides?: CallOverrides): Promise<void>

        updateSignatureVerifier(newSignatureVerifier: string, overrides?: CallOverrides): Promise<void>

        updateToken(newToken: string, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'LogAssetUpdated(string,bytes32)'(asset?: null, selectorHash?: BytesLike | null): LogAssetUpdatedEventFilter
        LogAssetUpdated(asset?: null, selectorHash?: BytesLike | null): LogAssetUpdatedEventFilter

        'LogBurn(bytes,uint256,uint256,bytes)'(
            to?: null,
            amount?: null,
            burnNonce?: BigNumberish | null,
            indexedTo?: BytesLike | null
        ): LogBurnEventFilter
        LogBurn(
            to?: null,
            amount?: null,
            burnNonce?: BigNumberish | null,
            indexedTo?: BytesLike | null
        ): LogBurnEventFilter

        'LogBurnToChain(string,string,bytes,uint256,uint256,string,string)'(
            recipientAddress?: null,
            recipientChain?: null,
            recipientPayload?: null,
            amount?: null,
            burnNonce?: BigNumberish | null,
            recipientAddressIndexed?: string | null,
            recipientChainIndexed?: string | null
        ): LogBurnToChainEventFilter
        LogBurnToChain(
            recipientAddress?: null,
            recipientChain?: null,
            recipientPayload?: null,
            amount?: null,
            burnNonce?: BigNumberish | null,
            recipientAddressIndexed?: string | null,
            recipientChainIndexed?: string | null
        ): LogBurnToChainEventFilter

        'LogMint(address,uint256,uint256,bytes32)'(
            to?: string | null,
            amount?: null,
            sigHash?: BigNumberish | null,
            nHash?: BytesLike | null
        ): LogMintEventFilter
        LogMint(
            to?: string | null,
            amount?: null,
            sigHash?: BigNumberish | null,
            nHash?: BytesLike | null
        ): LogMintEventFilter

        'LogPreviousGatewayUpdated(address,address)'(
            oldPreviousGateway?: string | null,
            newPreviousGateway?: string | null
        ): LogPreviousGatewayUpdatedEventFilter
        LogPreviousGatewayUpdated(
            oldPreviousGateway?: string | null,
            newPreviousGateway?: string | null
        ): LogPreviousGatewayUpdatedEventFilter

        'LogSignatureVerifierUpdated(address,address)'(
            oldSignatureVerifier?: string | null,
            newSignatureVerifier?: string | null
        ): LogSignatureVerifierUpdatedEventFilter
        LogSignatureVerifierUpdated(
            oldSignatureVerifier?: string | null,
            newSignatureVerifier?: string | null
        ): LogSignatureVerifierUpdatedEventFilter

        'LogTokenUpdated(address)'(token?: string | null): LogTokenUpdatedEventFilter
        LogTokenUpdated(token?: string | null): LogTokenUpdatedEventFilter

        'TokenOwnershipTransferred(address,address)'(
            tokenAddress?: string | null,
            nextTokenOwner?: string | null
        ): TokenOwnershipTransferredEventFilter
        TokenOwnershipTransferred(
            tokenAddress?: string | null,
            nextTokenOwner?: string | null
        ): TokenOwnershipTransferredEventFilter
    }

    estimateGas: {
        NAME(overrides?: CallOverrides): Promise<BigNumber>

        __GatewayStateManager_init(
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        __MintGateway_init(
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        _burnFromPreviousGateway(
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            caller: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        _mintFromPreviousGateway(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            caller: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'burn(bytes,uint256)'(
            recipient: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'burn(string,uint256)'(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        burnWithPayload(
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        getAsset(overrides?: CallOverrides): Promise<BigNumber>

        getEventNonce(overrides?: CallOverrides): Promise<BigNumber>

        getPreviousGateway(overrides?: CallOverrides): Promise<BigNumber>

        getSelectorHash(overrides?: CallOverrides): Promise<BigNumber>

        getSignatureVerifier(overrides?: CallOverrides): Promise<BigNumber>

        getToken(overrides?: CallOverrides): Promise<BigNumber>

        mint(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        status(hash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

        token(overrides?: CallOverrides): Promise<BigNumber>

        transferTokenOwnership(
            nextTokenOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        updateAsset(nextAsset: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        updatePreviousGateway(
            newPreviousGateway: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        updateSignatureVerifier(
            newSignatureVerifier: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        updateToken(newToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>
    }

    populateTransaction: {
        NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>

        __GatewayStateManager_init(
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        __MintGateway_init(
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        _burnFromPreviousGateway(
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            caller: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        _mintFromPreviousGateway(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            caller: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'burn(bytes,uint256)'(
            recipient: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'burn(string,uint256)'(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        burnWithPayload(
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        getAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getEventNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getPreviousGateway(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getSelectorHash(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getSignatureVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

        mint(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        status(hash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

        token(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transferTokenOwnership(
            nextTokenOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        updateAsset(
            nextAsset: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        updatePreviousGateway(
            newPreviousGateway: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        updateSignatureVerifier(
            newSignatureVerifier: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        updateToken(
            newToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>
    }
}
