/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import { FunctionFragment, Result } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export declare namespace ISwapRouter {
    export type ExactInputParamsStruct = {
        path: BytesLike
        recipient: string
        deadline: BigNumberish
        amountIn: BigNumberish
        amountOutMinimum: BigNumberish
    }

    export type ExactInputParamsStructOutput = [string, string, BigNumber, BigNumber, BigNumber] & {
        path: string
        recipient: string
        deadline: BigNumber
        amountIn: BigNumber
        amountOutMinimum: BigNumber
    }

    export type ExactInputSingleParamsStruct = {
        tokenIn: string
        tokenOut: string
        fee: BigNumberish
        recipient: string
        deadline: BigNumberish
        amountIn: BigNumberish
        amountOutMinimum: BigNumberish
        sqrtPriceLimitX96: BigNumberish
    }

    export type ExactInputSingleParamsStructOutput = [
        string,
        string,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        tokenIn: string
        tokenOut: string
        fee: number
        recipient: string
        deadline: BigNumber
        amountIn: BigNumber
        amountOutMinimum: BigNumber
        sqrtPriceLimitX96: BigNumber
    }

    export type ExactOutputParamsStruct = {
        path: BytesLike
        recipient: string
        deadline: BigNumberish
        amountOut: BigNumberish
        amountInMaximum: BigNumberish
    }

    export type ExactOutputParamsStructOutput = [string, string, BigNumber, BigNumber, BigNumber] & {
        path: string
        recipient: string
        deadline: BigNumber
        amountOut: BigNumber
        amountInMaximum: BigNumber
    }

    export type ExactOutputSingleParamsStruct = {
        tokenIn: string
        tokenOut: string
        fee: BigNumberish
        recipient: string
        deadline: BigNumberish
        amountOut: BigNumberish
        amountInMaximum: BigNumberish
        sqrtPriceLimitX96: BigNumberish
    }

    export type ExactOutputSingleParamsStructOutput = [
        string,
        string,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        tokenIn: string
        tokenOut: string
        fee: number
        recipient: string
        deadline: BigNumber
        amountOut: BigNumber
        amountInMaximum: BigNumber
        sqrtPriceLimitX96: BigNumber
    }
}

export interface UniV3RouterInterface extends utils.Interface {
    contractName: 'UniV3Router'
    functions: {
        'WETH9()': FunctionFragment
        'exactInput((bytes,address,uint256,uint256,uint256))': FunctionFragment
        'exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))': FunctionFragment
        'exactOutput((bytes,address,uint256,uint256,uint256))': FunctionFragment
        'exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))': FunctionFragment
        'factory()': FunctionFragment
        'hyperswapV3SwapCallback(int256,int256,bytes)': FunctionFragment
        'multicall(bytes[])': FunctionFragment
        'refundETH()': FunctionFragment
        'selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment
        'selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment
        'selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment
        'selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment
        'sweepToken(address,uint256,address)': FunctionFragment
        'sweepTokenWithFee(address,uint256,address,uint256,address)': FunctionFragment
        'unwrapWETH9(uint256,address)': FunctionFragment
        'unwrapWETH9WithFee(uint256,address,uint256,address)': FunctionFragment
    }

    encodeFunctionData(functionFragment: 'WETH9', values?: undefined): string
    encodeFunctionData(functionFragment: 'exactInput', values: [ISwapRouter.ExactInputParamsStruct]): string
    encodeFunctionData(functionFragment: 'exactInputSingle', values: [ISwapRouter.ExactInputSingleParamsStruct]): string
    encodeFunctionData(functionFragment: 'exactOutput', values: [ISwapRouter.ExactOutputParamsStruct]): string
    encodeFunctionData(
        functionFragment: 'exactOutputSingle',
        values: [ISwapRouter.ExactOutputSingleParamsStruct]
    ): string
    encodeFunctionData(functionFragment: 'factory', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'hyperswapV3SwapCallback',
        values: [BigNumberish, BigNumberish, BytesLike]
    ): string
    encodeFunctionData(functionFragment: 'multicall', values: [BytesLike[]]): string
    encodeFunctionData(functionFragment: 'refundETH', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'selfPermit',
        values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
    ): string
    encodeFunctionData(
        functionFragment: 'selfPermitAllowed',
        values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
    ): string
    encodeFunctionData(
        functionFragment: 'selfPermitAllowedIfNecessary',
        values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
    ): string
    encodeFunctionData(
        functionFragment: 'selfPermitIfNecessary',
        values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
    ): string
    encodeFunctionData(functionFragment: 'sweepToken', values: [string, BigNumberish, string]): string
    encodeFunctionData(
        functionFragment: 'sweepTokenWithFee',
        values: [string, BigNumberish, string, BigNumberish, string]
    ): string
    encodeFunctionData(functionFragment: 'unwrapWETH9', values: [BigNumberish, string]): string
    encodeFunctionData(
        functionFragment: 'unwrapWETH9WithFee',
        values: [BigNumberish, string, BigNumberish, string]
    ): string

    decodeFunctionResult(functionFragment: 'WETH9', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'exactInput', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'exactInputSingle', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'exactOutput', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'exactOutputSingle', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'hyperswapV3SwapCallback', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'refundETH', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'selfPermit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'selfPermitAllowed', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'selfPermitAllowedIfNecessary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'selfPermitIfNecessary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'sweepToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'sweepTokenWithFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'unwrapWETH9', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'unwrapWETH9WithFee', data: BytesLike): Result

    events: {}
}

export interface UniV3Router extends BaseContract {
    contractName: 'UniV3Router'
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: UniV3RouterInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        WETH9(overrides?: CallOverrides): Promise<[string]>

        exactInput(
            params: ISwapRouter.ExactInputParamsStruct,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        exactInputSingle(
            params: ISwapRouter.ExactInputSingleParamsStruct,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        exactOutput(
            params: ISwapRouter.ExactOutputParamsStruct,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        exactOutputSingle(
            params: ISwapRouter.ExactOutputSingleParamsStruct,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        factory(overrides?: CallOverrides): Promise<[string]>

        hyperswapV3SwapCallback(
            amount0Delta: BigNumberish,
            amount1Delta: BigNumberish,
            _data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        multicall(
            data: BytesLike[],
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        refundETH(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        selfPermit(
            token: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        selfPermitAllowed(
            token: string,
            nonce: BigNumberish,
            expiry: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        selfPermitAllowedIfNecessary(
            token: string,
            nonce: BigNumberish,
            expiry: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        selfPermitIfNecessary(
            token: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        sweepToken(
            token: string,
            amountMinimum: BigNumberish,
            recipient: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        sweepTokenWithFee(
            token: string,
            amountMinimum: BigNumberish,
            recipient: string,
            feeBips: BigNumberish,
            feeRecipient: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        unwrapWETH9(
            amountMinimum: BigNumberish,
            recipient: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        unwrapWETH9WithFee(
            amountMinimum: BigNumberish,
            recipient: string,
            feeBips: BigNumberish,
            feeRecipient: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>
    }

    WETH9(overrides?: CallOverrides): Promise<string>

    exactInput(
        params: ISwapRouter.ExactInputParamsStruct,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    exactInputSingle(
        params: ISwapRouter.ExactInputSingleParamsStruct,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    exactOutput(
        params: ISwapRouter.ExactOutputParamsStruct,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    exactOutputSingle(
        params: ISwapRouter.ExactOutputSingleParamsStruct,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    factory(overrides?: CallOverrides): Promise<string>

    hyperswapV3SwapCallback(
        amount0Delta: BigNumberish,
        amount1Delta: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    multicall(
        data: BytesLike[],
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    refundETH(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    selfPermit(
        token: string,
        value: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    selfPermitAllowed(
        token: string,
        nonce: BigNumberish,
        expiry: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    selfPermitAllowedIfNecessary(
        token: string,
        nonce: BigNumberish,
        expiry: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    selfPermitIfNecessary(
        token: string,
        value: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    sweepToken(
        token: string,
        amountMinimum: BigNumberish,
        recipient: string,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    sweepTokenWithFee(
        token: string,
        amountMinimum: BigNumberish,
        recipient: string,
        feeBips: BigNumberish,
        feeRecipient: string,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unwrapWETH9(
        amountMinimum: BigNumberish,
        recipient: string,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unwrapWETH9WithFee(
        amountMinimum: BigNumberish,
        recipient: string,
        feeBips: BigNumberish,
        feeRecipient: string,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        WETH9(overrides?: CallOverrides): Promise<string>

        exactInput(params: ISwapRouter.ExactInputParamsStruct, overrides?: CallOverrides): Promise<BigNumber>

        exactInputSingle(
            params: ISwapRouter.ExactInputSingleParamsStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        exactOutput(params: ISwapRouter.ExactOutputParamsStruct, overrides?: CallOverrides): Promise<BigNumber>

        exactOutputSingle(
            params: ISwapRouter.ExactOutputSingleParamsStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        factory(overrides?: CallOverrides): Promise<string>

        hyperswapV3SwapCallback(
            amount0Delta: BigNumberish,
            amount1Delta: BigNumberish,
            _data: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>

        refundETH(overrides?: CallOverrides): Promise<void>

        selfPermit(
            token: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        selfPermitAllowed(
            token: string,
            nonce: BigNumberish,
            expiry: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        selfPermitAllowedIfNecessary(
            token: string,
            nonce: BigNumberish,
            expiry: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        selfPermitIfNecessary(
            token: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        sweepToken(
            token: string,
            amountMinimum: BigNumberish,
            recipient: string,
            overrides?: CallOverrides
        ): Promise<void>

        sweepTokenWithFee(
            token: string,
            amountMinimum: BigNumberish,
            recipient: string,
            feeBips: BigNumberish,
            feeRecipient: string,
            overrides?: CallOverrides
        ): Promise<void>

        unwrapWETH9(amountMinimum: BigNumberish, recipient: string, overrides?: CallOverrides): Promise<void>

        unwrapWETH9WithFee(
            amountMinimum: BigNumberish,
            recipient: string,
            feeBips: BigNumberish,
            feeRecipient: string,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {}

    estimateGas: {
        WETH9(overrides?: CallOverrides): Promise<BigNumber>

        exactInput(
            params: ISwapRouter.ExactInputParamsStruct,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        exactInputSingle(
            params: ISwapRouter.ExactInputSingleParamsStruct,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        exactOutput(
            params: ISwapRouter.ExactOutputParamsStruct,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        exactOutputSingle(
            params: ISwapRouter.ExactOutputSingleParamsStruct,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        factory(overrides?: CallOverrides): Promise<BigNumber>

        hyperswapV3SwapCallback(
            amount0Delta: BigNumberish,
            amount1Delta: BigNumberish,
            _data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        multicall(
            data: BytesLike[],
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        refundETH(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>

        selfPermit(
            token: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        selfPermitAllowed(
            token: string,
            nonce: BigNumberish,
            expiry: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        selfPermitAllowedIfNecessary(
            token: string,
            nonce: BigNumberish,
            expiry: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        selfPermitIfNecessary(
            token: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        sweepToken(
            token: string,
            amountMinimum: BigNumberish,
            recipient: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        sweepTokenWithFee(
            token: string,
            amountMinimum: BigNumberish,
            recipient: string,
            feeBips: BigNumberish,
            feeRecipient: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        unwrapWETH9(
            amountMinimum: BigNumberish,
            recipient: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        unwrapWETH9WithFee(
            amountMinimum: BigNumberish,
            recipient: string,
            feeBips: BigNumberish,
            feeRecipient: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>

        exactInput(
            params: ISwapRouter.ExactInputParamsStruct,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        exactInputSingle(
            params: ISwapRouter.ExactInputSingleParamsStruct,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        exactOutput(
            params: ISwapRouter.ExactOutputParamsStruct,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        exactOutputSingle(
            params: ISwapRouter.ExactOutputSingleParamsStruct,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

        hyperswapV3SwapCallback(
            amount0Delta: BigNumberish,
            amount1Delta: BigNumberish,
            _data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        multicall(
            data: BytesLike[],
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        refundETH(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        selfPermit(
            token: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        selfPermitAllowed(
            token: string,
            nonce: BigNumberish,
            expiry: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        selfPermitAllowedIfNecessary(
            token: string,
            nonce: BigNumberish,
            expiry: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        selfPermitIfNecessary(
            token: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        sweepToken(
            token: string,
            amountMinimum: BigNumberish,
            recipient: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        sweepTokenWithFee(
            token: string,
            amountMinimum: BigNumberish,
            recipient: string,
            feeBips: BigNumberish,
            feeRecipient: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        unwrapWETH9(
            amountMinimum: BigNumberish,
            recipient: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        unwrapWETH9WithFee(
            amountMinimum: BigNumberish,
            recipient: string,
            feeBips: BigNumberish,
            feeRecipient: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>
    }
}
