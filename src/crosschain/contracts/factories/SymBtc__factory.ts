/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { SymBtc, SymBtcInterface } from "../SymBtc";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "contract BridgeV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "btcChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "btcTokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_btcFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_btcTxId",
        type: "bytes32",
      },
      {
        internalType: "SymBtc.BtcInputIndex",
        name: "_inputIndex",
        type: "uint32",
      },
      {
        internalType: "BtcSerial",
        name: "_wrapSerial",
        type: "uint64",
      },
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "receiveSide",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "receiveSideCalldata",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "receiveSideOffset",
            type: "uint256",
          },
        ],
        internalType: "struct SymBtc.FromBTCTransactionTail",
        name: "_tail",
        type: "tuple",
      },
    ],
    name: "getBTCCalldata",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_btcTxId",
        type: "bytes32",
      },
      {
        internalType: "SymBtc.BtcInputIndex",
        name: "_inputIndex",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address",
      },
    ],
    name: "getBTCExternalID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_btcTxId",
        type: "bytes32",
      },
      {
        internalType: "SymBtc.BtcInputIndex",
        name: "_inputIndex",
        type: "uint32",
      },
    ],
    name: "getBTCInternalID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getBtcTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_btcFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_btcTxId",
        type: "bytes32",
      },
      {
        internalType: "SymBtc.BtcInputIndex",
        name: "_inputIndex",
        type: "uint32",
      },
      {
        internalType: "BtcSerial",
        name: "_wrapSerial",
        type: "uint64",
      },
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "receiveSide",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "receiveSideCalldata",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "receiveSideOffset",
            type: "uint256",
          },
        ],
        internalType: "struct SymBtc.FromBTCTransactionTail",
        name: "_transactionTail",
        type: "tuple",
      },
    ],
    name: "getHashBTC",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newMPC",
        type: "address",
      },
    ],
    name: "getMpcHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSyntToken",
    outputs: [
      {
        internalType: "contract SyntERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridgeAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_synthesisAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_chainId",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mpc",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "receiveSide",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "receiveSideCalldata",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "receiveSideOffset",
            type: "uint256",
          },
        ],
        internalType: "struct SymBtc.FromBTCTransactionTail",
        name: "_transactionTail",
        type: "tuple",
      },
    ],
    name: "packBTCTransactionTail",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "synthesis",
    outputs: [
      {
        internalType: "contract Synthesis",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_transactionTail",
        type: "bytes",
      },
    ],
    name: "unpackBTCTransactionTail",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "receiveSide",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "receiveSideCalldata",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "receiveSideOffset",
            type: "uint256",
          },
        ],
        internalType: "struct SymBtc.FromBTCTransactionTail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

export class SymBtc__factory {
  static readonly abi = _abi;
  static createInterface(): SymBtcInterface {
    return new utils.Interface(_abi) as SymBtcInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SymBtc {
    return new Contract(address, _abi, signerOrProvider) as SymBtc;
  }
}
