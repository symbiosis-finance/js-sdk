/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import { Provider } from '@ethersproject/providers'
import type { IDepository, IDepositoryInterface } from '../IDepository'

const _abi = [
    {
        inputs: [
            {
                internalType: 'DepositID',
                name: 'id',
                type: 'bytes32',
            },
        ],
        name: 'DepositExists',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'DepositID',
                name: 'id',
                type: 'bytes32',
            },
        ],
        name: 'DepositUnavailable',
        type: 'error',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'DepositID',
                name: 'depositID',
                type: 'bytes32',
            },
            {
                components: [
                    {
                        internalType: 'contract IERC20',
                        name: 'token',
                        type: 'address',
                    },
                    {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'nonce',
                        type: 'uint256',
                    },
                ],
                indexed: false,
                internalType: 'struct DepositoryTypes.Deposit',
                name: 'deposit',
                type: 'tuple',
            },
            {
                components: [
                    {
                        internalType: 'contract IDepositUnlocker',
                        name: 'unlocker',
                        type: 'address',
                    },
                    {
                        internalType: 'bytes',
                        name: 'condition',
                        type: 'bytes',
                    },
                ],
                indexed: false,
                internalType: 'struct DepositoryTypes.UnlockCondition',
                name: 'unlocker',
                type: 'tuple',
            },
        ],
        name: 'DepositLocked',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'DepositID',
                name: 'depositID',
                type: 'bytes32',
            },
        ],
        name: 'DepositUnlocked',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'contract IRouter',
                name: 'oldRouter',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'contract IRouter',
                name: 'newRouter',
                type: 'address',
            },
        ],
        name: 'SetRouter',
        type: 'event',
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'contract IERC20',
                        name: 'token',
                        type: 'address',
                    },
                    {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'nonce',
                        type: 'uint256',
                    },
                ],
                internalType: 'struct DepositoryTypes.Deposit',
                name: 'depository',
                type: 'tuple',
            },
            {
                components: [
                    {
                        internalType: 'contract IDepositUnlocker',
                        name: 'unlocker',
                        type: 'address',
                    },
                    {
                        internalType: 'bytes',
                        name: 'condition',
                        type: 'bytes',
                    },
                ],
                internalType: 'struct DepositoryTypes.UnlockCondition',
                name: 'condition',
                type: 'tuple',
            },
        ],
        name: 'depositID',
        outputs: [
            {
                internalType: 'DepositID',
                name: '',
                type: 'bytes32',
            },
        ],
        stateMutability: 'pure',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'DepositID',
                name: 'depositID',
                type: 'bytes32',
            },
        ],
        name: 'depositStatus',
        outputs: [
            {
                internalType: 'bool',
                name: '',
                type: 'bool',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'contract IERC20',
                        name: 'token',
                        type: 'address',
                    },
                    {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'nonce',
                        type: 'uint256',
                    },
                ],
                internalType: 'struct DepositoryTypes.Deposit',
                name: 'deposit',
                type: 'tuple',
            },
            {
                components: [
                    {
                        internalType: 'contract IDepositUnlocker',
                        name: 'unlocker',
                        type: 'address',
                    },
                    {
                        internalType: 'bytes',
                        name: 'condition',
                        type: 'bytes',
                    },
                ],
                internalType: 'struct DepositoryTypes.UnlockCondition',
                name: 'condition',
                type: 'tuple',
            },
        ],
        name: 'lock',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [],
        name: 'router',
        outputs: [
            {
                internalType: 'contract IRouter',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'contract IERC20',
                        name: 'token',
                        type: 'address',
                    },
                    {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'nonce',
                        type: 'uint256',
                    },
                ],
                internalType: 'struct DepositoryTypes.Deposit',
                name: 'deposit',
                type: 'tuple',
            },
            {
                components: [
                    {
                        internalType: 'contract IDepositUnlocker',
                        name: 'unlocker',
                        type: 'address',
                    },
                    {
                        internalType: 'bytes',
                        name: 'condition',
                        type: 'bytes',
                    },
                ],
                internalType: 'struct DepositoryTypes.UnlockCondition',
                name: 'condition',
                type: 'tuple',
            },
            {
                internalType: 'bytes',
                name: 'solution',
                type: 'bytes',
            },
        ],
        name: 'unlock',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
]

export class IDepository__factory {
    static readonly abi = _abi
    static createInterface(): IDepositoryInterface {
        return new utils.Interface(_abi) as IDepositoryInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): IDepository {
        return new Contract(address, _abi, signerOrProvider) as IDepository
    }
}
