/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type { BranchedUnlocker, BranchedUnlockerInterface } from '../BranchedUnlocker'

const _abi = [
    {
        inputs: [
            {
                internalType: 'uint256',
                name: 'index',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'unlockerCount',
                type: 'uint256',
            },
        ],
        name: 'InvalidLockIndex',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'bytes',
                name: 'condition',
                type: 'bytes',
            },
        ],
        name: 'decodeCondition',
        outputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: 'contract IDepositUnlocker',
                                name: 'unlocker',
                                type: 'address',
                            },
                            {
                                internalType: 'bytes',
                                name: 'condition',
                                type: 'bytes',
                            },
                        ],
                        internalType: 'struct DepositoryTypes.UnlockCondition[]',
                        name: 'branches',
                        type: 'tuple[]',
                    },
                ],
                internalType: 'struct BranchedUnlocker.Condition',
                name: '',
                type: 'tuple',
            },
        ],
        stateMutability: 'pure',
        type: 'function',
    },
    {
        inputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: 'contract IDepositUnlocker',
                                name: 'unlocker',
                                type: 'address',
                            },
                            {
                                internalType: 'bytes',
                                name: 'condition',
                                type: 'bytes',
                            },
                        ],
                        internalType: 'struct DepositoryTypes.UnlockCondition[]',
                        name: 'branches',
                        type: 'tuple[]',
                    },
                ],
                internalType: 'struct BranchedUnlocker.Condition',
                name: 'c',
                type: 'tuple',
            },
        ],
        name: 'encodeCondition',
        outputs: [
            {
                internalType: 'bytes',
                name: '',
                type: 'bytes',
            },
        ],
        stateMutability: 'pure',
        type: 'function',
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'uint256',
                        name: 'index',
                        type: 'uint256',
                    },
                    {
                        internalType: 'bytes',
                        name: 'solution',
                        type: 'bytes',
                    },
                ],
                internalType: 'struct BranchedUnlocker.Solution',
                name: 's',
                type: 'tuple',
            },
        ],
        name: 'encodeSolution',
        outputs: [
            {
                internalType: 'bytes',
                name: '',
                type: 'bytes',
            },
        ],
        stateMutability: 'pure',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'contract IRouter',
                name: 'router',
                type: 'address',
            },
            {
                components: [
                    {
                        internalType: 'contract IERC20',
                        name: 'token',
                        type: 'address',
                    },
                    {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'nonce',
                        type: 'uint256',
                    },
                ],
                internalType: 'struct DepositoryTypes.Deposit',
                name: 'deposit',
                type: 'tuple',
            },
            {
                components: [
                    {
                        internalType: 'uint256',
                        name: 'blockNumber',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'timestamp',
                        type: 'uint256',
                    },
                ],
                internalType: 'struct DepositoryTypes.BlockchainState',
                name: 'blockchainState',
                type: 'tuple',
            },
            {
                internalType: 'bytes',
                name: 'condition',
                type: 'bytes',
            },
            {
                internalType: 'bytes',
                name: 'solution',
                type: 'bytes',
            },
        ],
        name: 'unlock',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
]

const _bytecode =
    '0x608060405234601957604051610d8561001e8239610d8590f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80634d8893d014610050578063760bd1181461004b57806385a600c7146100465763b11e07ce03610090576103b8565b61036b565b6102fe565b610168565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b73ffffffffffffffffffffffffffffffffffffffff81165b0361009057565b5f80fd5b905035906100a182610071565b565b908160609103126100905790565b908160409103126100905790565b909182601f830112156100905781359167ffffffffffffffff831161009057602001926001830284011161009057565b909161010082840312610090576101068383610094565b9261011481602085016100a3565b9261012282608083016100b1565b9260c082013567ffffffffffffffff811161009057836101439184016100bf565b92909360e082013567ffffffffffffffff81116100905761016492016100bf565b9091565b346100905761018761017b3660046100ef565b95949094939193610769565b60405180805b0390f35b9060208282031261009057813567ffffffffffffffff81116100905761016492016100bf565b61005561006e61006e9273ffffffffffffffffffffffffffffffffffffffff1690565b61006e906101b7565b61006e906101da565b6101f5906101e3565b9052565b90825f9392825e0152565b61022561022e60209361023893610219815190565b80835293849260200190565b958691016101f9565b601f01601f191690565b0190565b61006e91602060408201926102575f8201515f8501906101ec565b0151906020818403910152610204565b9061006e9161023c565b9061028761027d835190565b8083529160200190565b90816102996020830284019460200190565b925f915b8383106102ac57505050505090565b909192939460206102cf6102c883856001950387528951610267565b9760200190565b930193019193929061029d565b51602080835261006e920190610271565b602080825261006e929101906102dc565b346100905761018d61031a610314366004610191565b906109eb565b604051918291826102ed565b908160209103126100905790565b9060208282031261009057813567ffffffffffffffff81116100905761006e9201610326565b602080825261006e92910190610204565b346100905761018d610386610381366004610334565b610b92565b6040519182918261035a565b9060208282031261009057813567ffffffffffffffff81116100905761006e92016100b1565b346100905761018d6103866103ce366004610392565b610be9565b634e487b7160e01b5f52604160045260245ffd5b90601f01601f1916810190811067ffffffffffffffff82111761040957604052565b6103d3565b906100a161041b60405190565b92836103e7565b67ffffffffffffffff811161040957602090601f01601f19160190565b9061045161044c83610422565b61040e565b918252565b610460601f61043f565b7f4272616e63686564556e6c6f636b65722e756e6c6f636b28726f757465722900602082015290565b61006e610456565b61049b602861043f565b7f4272616e63686564556e6c6f636b65722e756e6c6f636b286272616e6368657360208201527f2e6c656e67746829000000000000000000000000000000000000000000000000604082015290565b61006e610491565b80610089565b905035906100a1826104f2565b90825f939282370152565b9092919261052061044c82610422565b9381855281830111610090576100a1916020850190610505565b9080601f830112156100905781602061006e93359101610510565b9190916040818403126100905761056c604061040e565b9261057781836104f8565b8452602082013567ffffffffffffffff811161009057610597920161053a565b6020830152565b9060208282031261009057813567ffffffffffffffff81116100905761006e9201610555565b6105ce601e61043f565b7f4272616e63686564556e6c6f636b65722e756e6c6f636b28696e646578290000602082015290565b61006e6105c4565b9081526040810192916100a19160200152565b1561061b575050565b7f3279a3b7000000000000000000000000000000000000000000000000000000005f9081529161064c9160046105ff565b035ffd5b634e487b7160e01b5f52603260045260245ffd5b9061066d825190565b81101561067e576020809102010190565b610650565b5f91031261009057565b5061006e906020810190610094565b5061006e9060208101906104f8565b9060406106eb6100a1936106cb6106c45f83018361068d565b85906101ec565b6106e26106db602083018361069c565b6020860152565b8281019061069c565b910152565b9060206106eb6100a1936106e26107095f83018361069c565b8552565b9361074361006e96946107396107509561072f6101008a01965f8b01906101ec565b60208901906106ab565b60808701906106f0565b84820360c0860152610204565b9160e0818403910152610204565b6040513d5f823e3d90fd5b945f61079661080f94966107b994966107916107848b6101e3565b61078c610489565b610c3e565b6109eb565b01966107b16107a489515190565b6107ac6104ea565b610cb9565b81019061059e565b948590610809906107d36107cb845190565b6107ac6105f7565b6108036107de845190565b6107f16107ed61006e85515190565b9190565b106107fa855190565b83515191610612565b51915190565b90610664565b519060208061083a610835855173ffffffffffffffffffffffffffffffffffffffff1690565b6101e3565b930151950151823b15610090575f9461088a869261085760405190565b988997889687957f4d8893d00000000000000000000000000000000000000000000000000000000087526004870161070d565b03925af180156108b25761089b5750565b6100a1905f6108aa81836103e7565b810190610683565b61075e565b61006e602061040e565b6108c96108b7565b9060608252565b61006e6108c1565b67ffffffffffffffff81116104095760208091020190565b91909160408184031261009057610907604061040e565b926105778183610094565b92919061092161044c826108d8565b93818552602080860192028101918383116100905781905b838210610947575050505050565b813567ffffffffffffffff81116100905760209161096887849387016108f0565b815201910190610939565b9080601f830112156100905781602061006e93359101610912565b919091602081840312610090576109a5602061040e565b92813567ffffffffffffffff8111610090576109c19201610973565b8252565b9060208282031261009057813567ffffffffffffffff81116100905761006e920161098e565b61006e916109f76108d0565b508101906109c5565b9035601e19368390030181121561009057016020813591019167ffffffffffffffff821161009057602082023603831361009057565b9035601e19368390030181121561009057016020813591019167ffffffffffffffff82116100905736829003831361009057565b919061022e81610a81816102389560209181520190565b8095610505565b61006e916040810191610ab390610aa9610aa2828061068d565b84906101ec565b6020810190610a36565b916020818503910152610a6a565b9061006e91610a88565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc13683900301811215610090570190565b818352916020019081610b146020830284019490565b92835f925b848410610b295750505050505090565b9091929394956020610b55610b4e8385600195038852610b498b88610acb565b610ac1565b9860200190565b940194019294939190610b19565b61006e916020810191610b769080610a00565b828403909252610afe565b602080825261006e92910190610b63565b61006e610b9e60405190565b8092610bae602083019182610b81565b908103825203826103e7565b61006e916040810191610ab390610aa9610bd4828061069c565b8452565b602080825261006e92910190610bba565b61006e610bf560405190565b8092610bae602083019182610bd8565b92916020610c216100a19360408701908782035f890152610204565b94019073ffffffffffffffffffffffffffffffffffffffff169052565b90610c936100a192610c84610c5260405190565b9384926004602085017f319af33300000000000000000000000000000000000000000000000000000000815201610c05565b602082018103825203826103e7565b610cff565b92916020610cb46100a19360408701908782035f890152610204565b940152565b90610c936100a192610c84610ccd60405190565b9384926004602085017fb60e72cc00000000000000000000000000000000000000000000000000000000815201610c98565b6100a1906001610d3f565b5f8091610d1f6a636f6e736f6c652e6c6f6790565b602082519201905afa50565b634e487b7160e01b5f52605160045260245ffd5b600103610d2b576100a190610d0a56fea26469706673582212204461214afad94eb09487142d03a25b92c6e18fb797d586fb384bdb1f0aea44b664736f6c634300081c0033'

type BranchedUnlockerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: BranchedUnlockerConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1

export class BranchedUnlocker__factory extends ContractFactory {
    constructor(...args: BranchedUnlockerConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args)
        } else {
            super(_abi, _bytecode, args[0])
        }
        this.contractName = 'BranchedUnlocker'
    }

    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BranchedUnlocker> {
        return super.deploy(overrides || {}) as Promise<BranchedUnlocker>
    }
    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {})
    }
    attach(address: string): BranchedUnlocker {
        return super.attach(address) as BranchedUnlocker
    }
    connect(signer: Signer): BranchedUnlocker__factory {
        return super.connect(signer) as BranchedUnlocker__factory
    }
    static readonly contractName: 'BranchedUnlocker'
    public readonly contractName: 'BranchedUnlocker'
    static readonly bytecode = _bytecode
    static readonly abi = _abi
    static createInterface(): BranchedUnlockerInterface {
        return new utils.Interface(_abi) as BranchedUnlockerInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): BranchedUnlocker {
        return new Contract(address, _abi, signerOrProvider) as BranchedUnlocker
    }
}
