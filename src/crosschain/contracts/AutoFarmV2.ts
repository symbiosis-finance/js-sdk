/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export interface AutoFarmV2Interface extends utils.Interface {
    contractName: 'AutoFarmV2'
    functions: {
        'AUTO()': FunctionFragment
        'AUTOMaxSupply()': FunctionFragment
        'AUTOPerBlock()': FunctionFragment
        'AUTOv2()': FunctionFragment
        'add(uint256,address,bool,address)': FunctionFragment
        'burnAddress()': FunctionFragment
        'deposit(uint256,uint256)': FunctionFragment
        'emergencyWithdraw(uint256)': FunctionFragment
        'getMultiplier(uint256,uint256)': FunctionFragment
        'inCaseTokensGetStuck(address,uint256)': FunctionFragment
        'massUpdatePools()': FunctionFragment
        'migrateToAUTOv2(uint256)': FunctionFragment
        'owner()': FunctionFragment
        'ownerAUTOReward()': FunctionFragment
        'pendingAUTO(uint256,address)': FunctionFragment
        'poolInfo(uint256)': FunctionFragment
        'poolLength()': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'set(uint256,uint256,bool)': FunctionFragment
        'stakedWantTokens(uint256,address)': FunctionFragment
        'startBlock()': FunctionFragment
        'totalAllocPoint()': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'updatePool(uint256)': FunctionFragment
        'userInfo(uint256,address)': FunctionFragment
        'withdraw(uint256,uint256)': FunctionFragment
        'withdrawAll(uint256)': FunctionFragment
    }

    encodeFunctionData(functionFragment: 'AUTO', values?: undefined): string
    encodeFunctionData(functionFragment: 'AUTOMaxSupply', values?: undefined): string
    encodeFunctionData(functionFragment: 'AUTOPerBlock', values?: undefined): string
    encodeFunctionData(functionFragment: 'AUTOv2', values?: undefined): string
    encodeFunctionData(functionFragment: 'add', values: [BigNumberish, string, boolean, string]): string
    encodeFunctionData(functionFragment: 'burnAddress', values?: undefined): string
    encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, BigNumberish]): string
    encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'getMultiplier', values: [BigNumberish, BigNumberish]): string
    encodeFunctionData(functionFragment: 'inCaseTokensGetStuck', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'massUpdatePools', values?: undefined): string
    encodeFunctionData(functionFragment: 'migrateToAUTOv2', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'ownerAUTOReward', values?: undefined): string
    encodeFunctionData(functionFragment: 'pendingAUTO', values: [BigNumberish, string]): string
    encodeFunctionData(functionFragment: 'poolInfo', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'poolLength', values?: undefined): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'set', values: [BigNumberish, BigNumberish, boolean]): string
    encodeFunctionData(functionFragment: 'stakedWantTokens', values: [BigNumberish, string]): string
    encodeFunctionData(functionFragment: 'startBlock', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalAllocPoint', values?: undefined): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
    encodeFunctionData(functionFragment: 'updatePool', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'userInfo', values: [BigNumberish, string]): string
    encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, BigNumberish]): string
    encodeFunctionData(functionFragment: 'withdrawAll', values: [BigNumberish]): string

    decodeFunctionResult(functionFragment: 'AUTO', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'AUTOMaxSupply', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'AUTOPerBlock', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'AUTOv2', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'burnAddress', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getMultiplier', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'inCaseTokensGetStuck', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'massUpdatePools', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'migrateToAUTOv2', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'ownerAUTOReward', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'pendingAUTO', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'stakedWantTokens', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'startBlock', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalAllocPoint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result

    events: {
        'Deposit(address,uint256,uint256)': EventFragment
        'EmergencyWithdraw(address,uint256,uint256)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'Withdraw(address,uint256,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
}

export type DepositEvent = TypedEvent<
    [string, BigNumber, BigNumber],
    { user: string; pid: BigNumber; amount: BigNumber }
>

export type DepositEventFilter = TypedEventFilter<DepositEvent>

export type EmergencyWithdrawEvent = TypedEvent<
    [string, BigNumber, BigNumber],
    { user: string; pid: BigNumber; amount: BigNumber }
>

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export type WithdrawEvent = TypedEvent<
    [string, BigNumber, BigNumber],
    { user: string; pid: BigNumber; amount: BigNumber }
>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export interface AutoFarmV2 extends BaseContract {
    contractName: 'AutoFarmV2'
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: AutoFarmV2Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        AUTO(overrides?: CallOverrides): Promise<[string]>

        AUTOMaxSupply(overrides?: CallOverrides): Promise<[BigNumber]>

        AUTOPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>

        AUTOv2(overrides?: CallOverrides): Promise<[string]>

        add(
            _allocPoint: BigNumberish,
            _want: string,
            _withUpdate: boolean,
            _strat: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        burnAddress(overrides?: CallOverrides): Promise<[string]>

        deposit(
            _pid: BigNumberish,
            _wantAmt: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        emergencyWithdraw(
            _pid: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

        inCaseTokensGetStuck(
            _token: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        migrateToAUTOv2(
            _inputAmt: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        owner(overrides?: CallOverrides): Promise<[string]>

        ownerAUTOReward(overrides?: CallOverrides): Promise<[BigNumber]>

        pendingAUTO(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<[BigNumber]>

        poolInfo(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [string, BigNumber, BigNumber, BigNumber, string] & {
                want: string
                allocPoint: BigNumber
                lastRewardBlock: BigNumber
                accAUTOPerShare: BigNumber
                strat: string
            }
        >

        poolLength(overrides?: CallOverrides): Promise<[BigNumber]>

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        set(
            _pid: BigNumberish,
            _allocPoint: BigNumberish,
            _withUpdate: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        stakedWantTokens(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<[BigNumber]>

        startBlock(overrides?: CallOverrides): Promise<[BigNumber]>

        totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        updatePool(
            _pid: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        userInfo(
            arg0: BigNumberish,
            arg1: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; rewardDebt: BigNumber }>

        withdraw(
            _pid: BigNumberish,
            _wantAmt: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        withdrawAll(
            _pid: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>
    }

    AUTO(overrides?: CallOverrides): Promise<string>

    AUTOMaxSupply(overrides?: CallOverrides): Promise<BigNumber>

    AUTOPerBlock(overrides?: CallOverrides): Promise<BigNumber>

    AUTOv2(overrides?: CallOverrides): Promise<string>

    add(
        _allocPoint: BigNumberish,
        _want: string,
        _withUpdate: boolean,
        _strat: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    burnAddress(overrides?: CallOverrides): Promise<string>

    deposit(
        _pid: BigNumberish,
        _wantAmt: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    emergencyWithdraw(
        _pid: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    inCaseTokensGetStuck(
        _token: string,
        _amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    migrateToAUTOv2(
        _inputAmt: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<string>

    ownerAUTOReward(overrides?: CallOverrides): Promise<BigNumber>

    pendingAUTO(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>

    poolInfo(
        arg0: BigNumberish,
        overrides?: CallOverrides
    ): Promise<
        [string, BigNumber, BigNumber, BigNumber, string] & {
            want: string
            allocPoint: BigNumber
            lastRewardBlock: BigNumber
            accAUTOPerShare: BigNumber
            strat: string
        }
    >

    poolLength(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    set(
        _pid: BigNumberish,
        _allocPoint: BigNumberish,
        _withUpdate: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    stakedWantTokens(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>

    startBlock(overrides?: CallOverrides): Promise<BigNumber>

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updatePool(
        _pid: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    userInfo(
        arg0: BigNumberish,
        arg1: string,
        overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; rewardDebt: BigNumber }>

    withdraw(
        _pid: BigNumberish,
        _wantAmt: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdrawAll(
        _pid: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        AUTO(overrides?: CallOverrides): Promise<string>

        AUTOMaxSupply(overrides?: CallOverrides): Promise<BigNumber>

        AUTOPerBlock(overrides?: CallOverrides): Promise<BigNumber>

        AUTOv2(overrides?: CallOverrides): Promise<string>

        add(
            _allocPoint: BigNumberish,
            _want: string,
            _withUpdate: boolean,
            _strat: string,
            overrides?: CallOverrides
        ): Promise<void>

        burnAddress(overrides?: CallOverrides): Promise<string>

        deposit(_pid: BigNumberish, _wantAmt: BigNumberish, overrides?: CallOverrides): Promise<void>

        emergencyWithdraw(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>

        getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        inCaseTokensGetStuck(_token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>

        massUpdatePools(overrides?: CallOverrides): Promise<void>

        migrateToAUTOv2(_inputAmt: BigNumberish, overrides?: CallOverrides): Promise<void>

        owner(overrides?: CallOverrides): Promise<string>

        ownerAUTOReward(overrides?: CallOverrides): Promise<BigNumber>

        pendingAUTO(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>

        poolInfo(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [string, BigNumber, BigNumber, BigNumber, string] & {
                want: string
                allocPoint: BigNumber
                lastRewardBlock: BigNumber
                accAUTOPerShare: BigNumber
                strat: string
            }
        >

        poolLength(overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        set(
            _pid: BigNumberish,
            _allocPoint: BigNumberish,
            _withUpdate: boolean,
            overrides?: CallOverrides
        ): Promise<void>

        stakedWantTokens(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>

        startBlock(overrides?: CallOverrides): Promise<BigNumber>

        totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

        updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>

        userInfo(
            arg0: BigNumberish,
            arg1: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; rewardDebt: BigNumber }>

        withdraw(_pid: BigNumberish, _wantAmt: BigNumberish, overrides?: CallOverrides): Promise<void>

        withdrawAll(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'Deposit(address,uint256,uint256)'(
            user?: string | null,
            pid?: BigNumberish | null,
            amount?: null
        ): DepositEventFilter
        Deposit(user?: string | null, pid?: BigNumberish | null, amount?: null): DepositEventFilter

        'EmergencyWithdraw(address,uint256,uint256)'(
            user?: string | null,
            pid?: BigNumberish | null,
            amount?: null
        ): EmergencyWithdrawEventFilter
        EmergencyWithdraw(user?: string | null, pid?: BigNumberish | null, amount?: null): EmergencyWithdrawEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: string | null,
            newOwner?: string | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter

        'Withdraw(address,uint256,uint256)'(
            user?: string | null,
            pid?: BigNumberish | null,
            amount?: null
        ): WithdrawEventFilter
        Withdraw(user?: string | null, pid?: BigNumberish | null, amount?: null): WithdrawEventFilter
    }

    estimateGas: {
        AUTO(overrides?: CallOverrides): Promise<BigNumber>

        AUTOMaxSupply(overrides?: CallOverrides): Promise<BigNumber>

        AUTOPerBlock(overrides?: CallOverrides): Promise<BigNumber>

        AUTOv2(overrides?: CallOverrides): Promise<BigNumber>

        add(
            _allocPoint: BigNumberish,
            _want: string,
            _withUpdate: boolean,
            _strat: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        burnAddress(overrides?: CallOverrides): Promise<BigNumber>

        deposit(
            _pid: BigNumberish,
            _wantAmt: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        emergencyWithdraw(
            _pid: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        inCaseTokensGetStuck(
            _token: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        migrateToAUTOv2(
            _inputAmt: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        ownerAUTOReward(overrides?: CallOverrides): Promise<BigNumber>

        pendingAUTO(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>

        poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        poolLength(overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        set(
            _pid: BigNumberish,
            _allocPoint: BigNumberish,
            _withUpdate: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        stakedWantTokens(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>

        startBlock(overrides?: CallOverrides): Promise<BigNumber>

        totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        updatePool(_pid: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        userInfo(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

        withdraw(
            _pid: BigNumberish,
            _wantAmt: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        withdrawAll(_pid: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>
    }

    populateTransaction: {
        AUTO(overrides?: CallOverrides): Promise<PopulatedTransaction>

        AUTOMaxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

        AUTOPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

        AUTOv2(overrides?: CallOverrides): Promise<PopulatedTransaction>

        add(
            _allocPoint: BigNumberish,
            _want: string,
            _withUpdate: boolean,
            _strat: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        burnAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

        deposit(
            _pid: BigNumberish,
            _wantAmt: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        emergencyWithdraw(
            _pid: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        inCaseTokensGetStuck(
            _token: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        migrateToAUTOv2(
            _inputAmt: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        ownerAUTOReward(overrides?: CallOverrides): Promise<PopulatedTransaction>

        pendingAUTO(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        set(
            _pid: BigNumberish,
            _allocPoint: BigNumberish,
            _withUpdate: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        stakedWantTokens(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        updatePool(
            _pid: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        userInfo(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        withdraw(
            _pid: BigNumberish,
            _wantAmt: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        withdrawAll(
            _pid: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>
    }
}
