/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export interface AlpacaVaultInterface extends utils.Interface {
    contractName: 'AlpacaVault'
    functions: {
        'POSITION_ID()': FunctionFragment
        'STRATEGY()': FunctionFragment
        '_IN_EXEC_LOCK()': FunctionFragment
        'addCollateral(uint256,uint256,bool,bytes)': FunctionFragment
        'allowance(address,address)': FunctionFragment
        'approve(address,uint256)': FunctionFragment
        'balanceOf(address)': FunctionFragment
        'config()': FunctionFragment
        'debtShareToVal(uint256)': FunctionFragment
        'debtToken()': FunctionFragment
        'debtValToShare(uint256)': FunctionFragment
        'decimals()': FunctionFragment
        'decreaseAllowance(address,uint256)': FunctionFragment
        'deposit(uint256)': FunctionFragment
        'fairLaunchPoolId()': FunctionFragment
        'increaseAllowance(address,uint256)': FunctionFragment
        'initialize(address,address,string,string,uint8,address)': FunctionFragment
        'kill(uint256)': FunctionFragment
        'lastAccrueTime()': FunctionFragment
        'name()': FunctionFragment
        'nextPositionID()': FunctionFragment
        'owner()': FunctionFragment
        'pendingInterest(uint256)': FunctionFragment
        'positionInfo(uint256)': FunctionFragment
        'positions(uint256)': FunctionFragment
        'reduceReserve(uint256)': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'requestFunds(address,uint256)': FunctionFragment
        'reservePool()': FunctionFragment
        'setFairLaunchPoolId(uint256)': FunctionFragment
        'symbol()': FunctionFragment
        'token()': FunctionFragment
        'totalSupply()': FunctionFragment
        'totalToken()': FunctionFragment
        'transfer(address,uint256)': FunctionFragment
        'transferFrom(address,address,uint256)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'updateConfig(address)': FunctionFragment
        'vaultDebtShare()': FunctionFragment
        'vaultDebtVal()': FunctionFragment
        'withdraw(uint256)': FunctionFragment
        'withdrawReserve(address,uint256)': FunctionFragment
        'work(uint256,address,uint256,uint256,uint256,bytes)': FunctionFragment
    }

    encodeFunctionData(functionFragment: 'POSITION_ID', values?: undefined): string
    encodeFunctionData(functionFragment: 'STRATEGY', values?: undefined): string
    encodeFunctionData(functionFragment: '_IN_EXEC_LOCK', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'addCollateral',
        values: [BigNumberish, BigNumberish, boolean, BytesLike]
    ): string
    encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string
    encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
    encodeFunctionData(functionFragment: 'config', values?: undefined): string
    encodeFunctionData(functionFragment: 'debtShareToVal', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'debtToken', values?: undefined): string
    encodeFunctionData(functionFragment: 'debtValToShare', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
    encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'fairLaunchPoolId', values?: undefined): string
    encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string
    encodeFunctionData(
        functionFragment: 'initialize',
        values: [string, string, string, string, BigNumberish, string]
    ): string
    encodeFunctionData(functionFragment: 'kill', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'lastAccrueTime', values?: undefined): string
    encodeFunctionData(functionFragment: 'name', values?: undefined): string
    encodeFunctionData(functionFragment: 'nextPositionID', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'pendingInterest', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'positionInfo', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'positions', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'reduceReserve', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'requestFunds', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'reservePool', values?: undefined): string
    encodeFunctionData(functionFragment: 'setFairLaunchPoolId', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
    encodeFunctionData(functionFragment: 'token', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalToken', values?: undefined): string
    encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
    encodeFunctionData(functionFragment: 'updateConfig', values: [string]): string
    encodeFunctionData(functionFragment: 'vaultDebtShare', values?: undefined): string
    encodeFunctionData(functionFragment: 'vaultDebtVal', values?: undefined): string
    encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'withdrawReserve', values: [string, BigNumberish]): string
    encodeFunctionData(
        functionFragment: 'work',
        values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
    ): string

    decodeFunctionResult(functionFragment: 'POSITION_ID', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'STRATEGY', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_IN_EXEC_LOCK', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'addCollateral', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'config', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'debtShareToVal', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'debtToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'debtValToShare', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'fairLaunchPoolId', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'kill', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lastAccrueTime', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nextPositionID', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'pendingInterest', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'positionInfo', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'positions', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'reduceReserve', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'requestFunds', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'reservePool', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setFairLaunchPoolId', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updateConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'vaultDebtShare', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'vaultDebtVal', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawReserve', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'work', data: BytesLike): Result

    events: {
        'AddCollateral(uint256,uint256,uint256,uint256)': EventFragment
        'AddDebt(uint256,uint256)': EventFragment
        'Approval(address,address,uint256)': EventFragment
        'Kill(uint256,address,address,uint256,uint256,uint256,uint256)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'RemoveDebt(uint256,uint256)': EventFragment
        'Transfer(address,address,uint256)': EventFragment
        'Work(uint256,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'AddCollateral'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'AddDebt'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Kill'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RemoveDebt'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Work'): EventFragment
}

export type AddCollateralEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber],
    {
        id: BigNumber
        amount: BigNumber
        healthBefore: BigNumber
        healthAfter: BigNumber
    }
>

export type AddCollateralEventFilter = TypedEventFilter<AddCollateralEvent>

export type AddDebtEvent = TypedEvent<[BigNumber, BigNumber], { id: BigNumber; debtShare: BigNumber }>

export type AddDebtEventFilter = TypedEventFilter<AddDebtEvent>

export type ApprovalEvent = TypedEvent<
    [string, string, BigNumber],
    { owner: string; spender: string; value: BigNumber }
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export type KillEvent = TypedEvent<
    [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
    {
        id: BigNumber
        killer: string
        owner: string
        posVal: BigNumber
        debt: BigNumber
        prize: BigNumber
        left: BigNumber
    }
>

export type KillEventFilter = TypedEventFilter<KillEvent>

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export type RemoveDebtEvent = TypedEvent<[BigNumber, BigNumber], { id: BigNumber; debtShare: BigNumber }>

export type RemoveDebtEventFilter = TypedEventFilter<RemoveDebtEvent>

export type TransferEvent = TypedEvent<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export type WorkEvent = TypedEvent<[BigNumber, BigNumber], { id: BigNumber; loan: BigNumber }>

export type WorkEventFilter = TypedEventFilter<WorkEvent>

export interface AlpacaVault extends BaseContract {
    contractName: 'AlpacaVault'
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: AlpacaVaultInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        POSITION_ID(overrides?: CallOverrides): Promise<[BigNumber]>

        STRATEGY(overrides?: CallOverrides): Promise<[string]>

        _IN_EXEC_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>

        addCollateral(
            id: BigNumberish,
            amount: BigNumberish,
            goRogue: boolean,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

        config(overrides?: CallOverrides): Promise<[string]>

        debtShareToVal(debtShare: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

        debtToken(overrides?: CallOverrides): Promise<[string]>

        debtValToShare(debtVal: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

        decimals(overrides?: CallOverrides): Promise<[number]>

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        deposit(
            amountToken: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        fairLaunchPoolId(overrides?: CallOverrides): Promise<[BigNumber]>

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        initialize(
            _config: string,
            _token: string,
            _name: string,
            _symbol: string,
            _decimals: BigNumberish,
            _debtToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        kill(
            id: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        lastAccrueTime(overrides?: CallOverrides): Promise<[BigNumber]>

        name(overrides?: CallOverrides): Promise<[string]>

        nextPositionID(overrides?: CallOverrides): Promise<[BigNumber]>

        owner(overrides?: CallOverrides): Promise<[string]>

        pendingInterest(value: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

        positionInfo(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>

        positions(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [string, string, BigNumber] & {
                worker: string
                owner: string
                debtShare: BigNumber
            }
        >

        reduceReserve(
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        requestFunds(
            targetedToken: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        reservePool(overrides?: CallOverrides): Promise<[BigNumber]>

        setFairLaunchPoolId(
            _poolId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        symbol(overrides?: CallOverrides): Promise<[string]>

        token(overrides?: CallOverrides): Promise<[string]>

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

        totalToken(overrides?: CallOverrides): Promise<[BigNumber]>

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        updateConfig(
            _config: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        vaultDebtShare(overrides?: CallOverrides): Promise<[BigNumber]>

        vaultDebtVal(overrides?: CallOverrides): Promise<[BigNumber]>

        withdraw(
            share: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        withdrawReserve(
            to: string,
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        work(
            id: BigNumberish,
            worker: string,
            principalAmount: BigNumberish,
            borrowAmount: BigNumberish,
            maxReturn: BigNumberish,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>
    }

    POSITION_ID(overrides?: CallOverrides): Promise<BigNumber>

    STRATEGY(overrides?: CallOverrides): Promise<string>

    _IN_EXEC_LOCK(overrides?: CallOverrides): Promise<BigNumber>

    addCollateral(
        id: BigNumberish,
        amount: BigNumberish,
        goRogue: boolean,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(
        spender: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    config(overrides?: CallOverrides): Promise<string>

    debtShareToVal(debtShare: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    debtToken(overrides?: CallOverrides): Promise<string>

    debtValToShare(debtVal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
        spender: string,
        subtractedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    deposit(
        amountToken: BigNumberish,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    fairLaunchPoolId(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
        spender: string,
        addedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    initialize(
        _config: string,
        _token: string,
        _name: string,
        _symbol: string,
        _decimals: BigNumberish,
        _debtToken: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    kill(id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    lastAccrueTime(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<string>

    nextPositionID(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    pendingInterest(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    positionInfo(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>

    positions(
        arg0: BigNumberish,
        overrides?: CallOverrides
    ): Promise<
        [string, string, BigNumber] & {
            worker: string
            owner: string
            debtShare: BigNumber
        }
    >

    reduceReserve(
        value: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    requestFunds(
        targetedToken: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    reservePool(overrides?: CallOverrides): Promise<BigNumber>

    setFairLaunchPoolId(
        _poolId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<string>

    token(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    totalToken(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferFrom(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateConfig(
        _config: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    vaultDebtShare(overrides?: CallOverrides): Promise<BigNumber>

    vaultDebtVal(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(
        share: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdrawReserve(
        to: string,
        value: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    work(
        id: BigNumberish,
        worker: string,
        principalAmount: BigNumberish,
        borrowAmount: BigNumberish,
        maxReturn: BigNumberish,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        POSITION_ID(overrides?: CallOverrides): Promise<BigNumber>

        STRATEGY(overrides?: CallOverrides): Promise<string>

        _IN_EXEC_LOCK(overrides?: CallOverrides): Promise<BigNumber>

        addCollateral(
            id: BigNumberish,
            amount: BigNumberish,
            goRogue: boolean,
            data: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

        approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

        config(overrides?: CallOverrides): Promise<string>

        debtShareToVal(debtShare: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        debtToken(overrides?: CallOverrides): Promise<string>

        debtValToShare(debtVal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        decimals(overrides?: CallOverrides): Promise<number>

        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>

        deposit(amountToken: BigNumberish, overrides?: CallOverrides): Promise<void>

        fairLaunchPoolId(overrides?: CallOverrides): Promise<BigNumber>

        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>

        initialize(
            _config: string,
            _token: string,
            _name: string,
            _symbol: string,
            _decimals: BigNumberish,
            _debtToken: string,
            overrides?: CallOverrides
        ): Promise<void>

        kill(id: BigNumberish, overrides?: CallOverrides): Promise<void>

        lastAccrueTime(overrides?: CallOverrides): Promise<BigNumber>

        name(overrides?: CallOverrides): Promise<string>

        nextPositionID(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<string>

        pendingInterest(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        positionInfo(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>

        positions(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [string, string, BigNumber] & {
                worker: string
                owner: string
                debtShare: BigNumber
            }
        >

        reduceReserve(value: BigNumberish, overrides?: CallOverrides): Promise<void>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        requestFunds(targetedToken: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>

        reservePool(overrides?: CallOverrides): Promise<BigNumber>

        setFairLaunchPoolId(_poolId: BigNumberish, overrides?: CallOverrides): Promise<void>

        symbol(overrides?: CallOverrides): Promise<string>

        token(overrides?: CallOverrides): Promise<string>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        totalToken(overrides?: CallOverrides): Promise<BigNumber>

        transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

        updateConfig(_config: string, overrides?: CallOverrides): Promise<void>

        vaultDebtShare(overrides?: CallOverrides): Promise<BigNumber>

        vaultDebtVal(overrides?: CallOverrides): Promise<BigNumber>

        withdraw(share: BigNumberish, overrides?: CallOverrides): Promise<void>

        withdrawReserve(to: string, value: BigNumberish, overrides?: CallOverrides): Promise<void>

        work(
            id: BigNumberish,
            worker: string,
            principalAmount: BigNumberish,
            borrowAmount: BigNumberish,
            maxReturn: BigNumberish,
            data: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'AddCollateral(uint256,uint256,uint256,uint256)'(
            id?: BigNumberish | null,
            amount?: null,
            healthBefore?: null,
            healthAfter?: null
        ): AddCollateralEventFilter
        AddCollateral(
            id?: BigNumberish | null,
            amount?: null,
            healthBefore?: null,
            healthAfter?: null
        ): AddCollateralEventFilter

        'AddDebt(uint256,uint256)'(id?: BigNumberish | null, debtShare?: null): AddDebtEventFilter
        AddDebt(id?: BigNumberish | null, debtShare?: null): AddDebtEventFilter

        'Approval(address,address,uint256)'(
            owner?: string | null,
            spender?: string | null,
            value?: null
        ): ApprovalEventFilter
        Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter

        'Kill(uint256,address,address,uint256,uint256,uint256,uint256)'(
            id?: BigNumberish | null,
            killer?: string | null,
            owner?: null,
            posVal?: null,
            debt?: null,
            prize?: null,
            left?: null
        ): KillEventFilter
        Kill(
            id?: BigNumberish | null,
            killer?: string | null,
            owner?: null,
            posVal?: null,
            debt?: null,
            prize?: null,
            left?: null
        ): KillEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: string | null,
            newOwner?: string | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter

        'RemoveDebt(uint256,uint256)'(id?: BigNumberish | null, debtShare?: null): RemoveDebtEventFilter
        RemoveDebt(id?: BigNumberish | null, debtShare?: null): RemoveDebtEventFilter

        'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter
        Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter

        'Work(uint256,uint256)'(id?: BigNumberish | null, loan?: null): WorkEventFilter
        Work(id?: BigNumberish | null, loan?: null): WorkEventFilter
    }

    estimateGas: {
        POSITION_ID(overrides?: CallOverrides): Promise<BigNumber>

        STRATEGY(overrides?: CallOverrides): Promise<BigNumber>

        _IN_EXEC_LOCK(overrides?: CallOverrides): Promise<BigNumber>

        addCollateral(
            id: BigNumberish,
            amount: BigNumberish,
            goRogue: boolean,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

        config(overrides?: CallOverrides): Promise<BigNumber>

        debtShareToVal(debtShare: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        debtToken(overrides?: CallOverrides): Promise<BigNumber>

        debtValToShare(debtVal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        decimals(overrides?: CallOverrides): Promise<BigNumber>

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        deposit(
            amountToken: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        fairLaunchPoolId(overrides?: CallOverrides): Promise<BigNumber>

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        initialize(
            _config: string,
            _token: string,
            _name: string,
            _symbol: string,
            _decimals: BigNumberish,
            _debtToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        kill(id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        lastAccrueTime(overrides?: CallOverrides): Promise<BigNumber>

        name(overrides?: CallOverrides): Promise<BigNumber>

        nextPositionID(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        pendingInterest(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        positionInfo(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        positions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        reduceReserve(
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        requestFunds(
            targetedToken: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        reservePool(overrides?: CallOverrides): Promise<BigNumber>

        setFairLaunchPoolId(
            _poolId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        symbol(overrides?: CallOverrides): Promise<BigNumber>

        token(overrides?: CallOverrides): Promise<BigNumber>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        totalToken(overrides?: CallOverrides): Promise<BigNumber>

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        updateConfig(_config: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        vaultDebtShare(overrides?: CallOverrides): Promise<BigNumber>

        vaultDebtVal(overrides?: CallOverrides): Promise<BigNumber>

        withdraw(share: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        withdrawReserve(
            to: string,
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        work(
            id: BigNumberish,
            worker: string,
            principalAmount: BigNumberish,
            borrowAmount: BigNumberish,
            maxReturn: BigNumberish,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        POSITION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>

        STRATEGY(overrides?: CallOverrides): Promise<PopulatedTransaction>

        _IN_EXEC_LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>

        addCollateral(
            id: BigNumberish,
            amount: BigNumberish,
            goRogue: boolean,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        config(overrides?: CallOverrides): Promise<PopulatedTransaction>

        debtShareToVal(debtShare: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        debtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

        debtValToShare(debtVal: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        deposit(
            amountToken: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        fairLaunchPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        initialize(
            _config: string,
            _token: string,
            _name: string,
            _symbol: string,
            _decimals: BigNumberish,
            _debtToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        kill(
            id: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        lastAccrueTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>

        nextPositionID(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        pendingInterest(value: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        positionInfo(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        positions(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        reduceReserve(
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        requestFunds(
            targetedToken: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        reservePool(overrides?: CallOverrides): Promise<PopulatedTransaction>

        setFairLaunchPoolId(
            _poolId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

        token(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        updateConfig(
            _config: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        vaultDebtShare(overrides?: CallOverrides): Promise<PopulatedTransaction>

        vaultDebtVal(overrides?: CallOverrides): Promise<PopulatedTransaction>

        withdraw(
            share: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        withdrawReserve(
            to: string,
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        work(
            id: BigNumberish,
            worker: string,
            principalAmount: BigNumberish,
            borrowAmount: BigNumberish,
            maxReturn: BigNumberish,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>
    }
}
