/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export declare namespace DepositoryTypes {
    export type DepositStruct = {
        token: string
        amount: BigNumberish
        nonce: BigNumberish
    }

    export type DepositStructOutput = [string, BigNumber, BigNumber] & {
        token: string
        amount: BigNumber
        nonce: BigNumber
    }

    export type UnlockerStruct = { unlocker: string; condition: BytesLike }

    export type UnlockerStructOutput = [string, string] & {
        unlocker: string
        condition: string
    }
}

export interface DepositoryInterface extends utils.Interface {
    contractName: 'Depository'
    functions: {
        'UPGRADE_INTERFACE_VERSION()': FunctionFragment
        'depositID((address,uint256,uint256),(address,bytes))': FunctionFragment
        'deposits(bytes32)': FunctionFragment
        'initialize(address)': FunctionFragment
        'lock((address,uint256,uint256),(address,bytes))': FunctionFragment
        'metaRouter()': FunctionFragment
        'owner()': FunctionFragment
        'proxiableUUID()': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'unlock((address,uint256,uint256),(address,bytes),bytes)': FunctionFragment
        'upgradeToAndCall(address,bytes)': FunctionFragment
    }

    encodeFunctionData(functionFragment: 'UPGRADE_INTERFACE_VERSION', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'depositID',
        values: [DepositoryTypes.DepositStruct, DepositoryTypes.UnlockerStruct]
    ): string
    encodeFunctionData(functionFragment: 'deposits', values: [BytesLike]): string
    encodeFunctionData(functionFragment: 'initialize', values: [string]): string
    encodeFunctionData(
        functionFragment: 'lock',
        values: [DepositoryTypes.DepositStruct, DepositoryTypes.UnlockerStruct]
    ): string
    encodeFunctionData(functionFragment: 'metaRouter', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
    encodeFunctionData(
        functionFragment: 'unlock',
        values: [DepositoryTypes.DepositStruct, DepositoryTypes.UnlockerStruct, BytesLike]
    ): string
    encodeFunctionData(functionFragment: 'upgradeToAndCall', values: [string, BytesLike]): string

    decodeFunctionResult(functionFragment: 'UPGRADE_INTERFACE_VERSION', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'depositID', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'deposits', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lock', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'metaRouter', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'unlock', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result

    events: {
        'DepositLocked(bytes32,tuple,tuple)': EventFragment
        'DepositUnlocked(bytes32)': EventFragment
        'Initialized(uint64)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'Upgraded(address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'DepositLocked'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'DepositUnlocked'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export type DepositLockedEvent = TypedEvent<
    [string, DepositoryTypes.DepositStructOutput, DepositoryTypes.UnlockerStructOutput],
    {
        depositID: string
        deposit: DepositoryTypes.DepositStructOutput
        unlocker: DepositoryTypes.UnlockerStructOutput
    }
>

export type DepositLockedEventFilter = TypedEventFilter<DepositLockedEvent>

export type DepositUnlockedEvent = TypedEvent<[string], { depositID: string }>

export type DepositUnlockedEventFilter = TypedEventFilter<DepositUnlockedEvent>

export type InitializedEvent = TypedEvent<[BigNumber], { version: BigNumber }>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>

export interface Depository extends BaseContract {
    contractName: 'Depository'
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: DepositoryInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>

        depositID(
            d: DepositoryTypes.DepositStruct,
            u: DepositoryTypes.UnlockerStruct,
            overrides?: CallOverrides
        ): Promise<[string]>

        deposits(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>

        initialize(
            _metaRouter: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        lock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        metaRouter(overrides?: CallOverrides): Promise<[string]>

        owner(overrides?: CallOverrides): Promise<[string]>

        proxiableUUID(overrides?: CallOverrides): Promise<[string]>

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        unlock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            solution: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        upgradeToAndCall(
            newImplementation: string,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>
    }

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>

    depositID(
        d: DepositoryTypes.DepositStruct,
        u: DepositoryTypes.UnlockerStruct,
        overrides?: CallOverrides
    ): Promise<string>

    deposits(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>

    initialize(
        _metaRouter: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    lock(
        deposit: DepositoryTypes.DepositStruct,
        unlocker: DepositoryTypes.UnlockerStruct,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    metaRouter(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    proxiableUUID(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unlock(
        deposit: DepositoryTypes.DepositStruct,
        unlocker: DepositoryTypes.UnlockerStruct,
        solution: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    upgradeToAndCall(
        newImplementation: string,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>

        depositID(
            d: DepositoryTypes.DepositStruct,
            u: DepositoryTypes.UnlockerStruct,
            overrides?: CallOverrides
        ): Promise<string>

        deposits(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>

        initialize(_metaRouter: string, overrides?: CallOverrides): Promise<void>

        lock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            overrides?: CallOverrides
        ): Promise<void>

        metaRouter(overrides?: CallOverrides): Promise<string>

        owner(overrides?: CallOverrides): Promise<string>

        proxiableUUID(overrides?: CallOverrides): Promise<string>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

        unlock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            solution: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        upgradeToAndCall(newImplementation: string, data: BytesLike, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'DepositLocked(bytes32,tuple,tuple)'(
            depositID?: BytesLike | null,
            deposit?: null,
            unlocker?: null
        ): DepositLockedEventFilter
        DepositLocked(depositID?: BytesLike | null, deposit?: null, unlocker?: null): DepositLockedEventFilter

        'DepositUnlocked(bytes32)'(depositID?: BytesLike | null): DepositUnlockedEventFilter
        DepositUnlocked(depositID?: BytesLike | null): DepositUnlockedEventFilter

        'Initialized(uint64)'(version?: null): InitializedEventFilter
        Initialized(version?: null): InitializedEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: string | null,
            newOwner?: string | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter

        'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter
        Upgraded(implementation?: string | null): UpgradedEventFilter
    }

    estimateGas: {
        UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>

        depositID(
            d: DepositoryTypes.DepositStruct,
            u: DepositoryTypes.UnlockerStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        deposits(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

        initialize(_metaRouter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        lock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        metaRouter(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        unlock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            solution: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        upgradeToAndCall(
            newImplementation: string,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>

        depositID(
            d: DepositoryTypes.DepositStruct,
            u: DepositoryTypes.UnlockerStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        deposits(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

        initialize(
            _metaRouter: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        lock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        metaRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        unlock(
            deposit: DepositoryTypes.DepositStruct,
            unlocker: DepositoryTypes.UnlockerStruct,
            solution: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        upgradeToAndCall(
            newImplementation: string,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>
    }
}
