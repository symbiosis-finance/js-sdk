/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common.js'

export interface PartnerFeeCollectorInterface extends utils.Interface {
    functions: {
        'WAD()': FunctionFragment
        'activatePartner(address,uint256)': FunctionFragment
        'changeDefaultPartner(address,uint256)': FunctionFragment
        'claimFee(address)': FunctionFragment
        'collectFee(uint256,address,address)': FunctionFragment
        'collectedFees(address,address)': FunctionFragment
        'deactivatePartner(address)': FunctionFragment
        'defaultPartner()': FunctionFragment
        'fixedFee(address,address)': FunctionFragment
        'initialize(address,uint256)': FunctionFragment
        'owner()': FunctionFragment
        'partners(address)': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'setFeeRate(address,uint256)': FunctionFragment
        'setFixedFee(address,address,uint256)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'WAD'
            | 'activatePartner'
            | 'changeDefaultPartner'
            | 'claimFee'
            | 'collectFee'
            | 'collectedFees'
            | 'deactivatePartner'
            | 'defaultPartner'
            | 'fixedFee'
            | 'initialize'
            | 'owner'
            | 'partners'
            | 'renounceOwnership'
            | 'setFeeRate'
            | 'setFixedFee'
            | 'transferOwnership'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'WAD', values?: undefined): string
    encodeFunctionData(functionFragment: 'activatePartner', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'changeDefaultPartner', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'claimFee', values: [string]): string
    encodeFunctionData(functionFragment: 'collectFee', values: [BigNumberish, string, string]): string
    encodeFunctionData(functionFragment: 'collectedFees', values: [string, string]): string
    encodeFunctionData(functionFragment: 'deactivatePartner', values: [string]): string
    encodeFunctionData(functionFragment: 'defaultPartner', values?: undefined): string
    encodeFunctionData(functionFragment: 'fixedFee', values: [string, string]): string
    encodeFunctionData(functionFragment: 'initialize', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'partners', values: [string]): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'setFeeRate', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'setFixedFee', values: [string, string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string

    decodeFunctionResult(functionFragment: 'WAD', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'activatePartner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'changeDefaultPartner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'claimFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'collectFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'collectedFees', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'deactivatePartner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'defaultPartner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'fixedFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'partners', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setFeeRate', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setFixedFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

    events: {
        'FeeClaimed(address,address,uint256)': EventFragment
        'FeeCollected(address,address,uint256,uint256)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'PartnerActivated(address,uint256)': EventFragment
        'PartnerDeactivated(address)': EventFragment
        'PartnerFeeRateUpdated(address,uint256)': EventFragment
        'PartnerFixedFeeUpdated(address,address,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'FeeClaimed'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'FeeCollected'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PartnerActivated'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PartnerDeactivated'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PartnerFeeRateUpdated'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PartnerFixedFeeUpdated'): EventFragment
}

export interface FeeClaimedEventObject {
    partner: string
    token: string
    amount: BigNumber
}
export type FeeClaimedEvent = TypedEvent<[string, string, BigNumber], FeeClaimedEventObject>

export type FeeClaimedEventFilter = TypedEventFilter<FeeClaimedEvent>

export interface FeeCollectedEventObject {
    partner: string
    token: string
    amount: BigNumber
    fee: BigNumber
}
export type FeeCollectedEvent = TypedEvent<[string, string, BigNumber, BigNumber], FeeCollectedEventObject>

export type FeeCollectedEventFilter = TypedEventFilter<FeeCollectedEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PartnerActivatedEventObject {
    partner: string
    feeRate: BigNumber
}
export type PartnerActivatedEvent = TypedEvent<[string, BigNumber], PartnerActivatedEventObject>

export type PartnerActivatedEventFilter = TypedEventFilter<PartnerActivatedEvent>

export interface PartnerDeactivatedEventObject {
    partner: string
}
export type PartnerDeactivatedEvent = TypedEvent<[string], PartnerDeactivatedEventObject>

export type PartnerDeactivatedEventFilter = TypedEventFilter<PartnerDeactivatedEvent>

export interface PartnerFeeRateUpdatedEventObject {
    partner: string
    feeRate: BigNumber
}
export type PartnerFeeRateUpdatedEvent = TypedEvent<[string, BigNumber], PartnerFeeRateUpdatedEventObject>

export type PartnerFeeRateUpdatedEventFilter = TypedEventFilter<PartnerFeeRateUpdatedEvent>

export interface PartnerFixedFeeUpdatedEventObject {
    partner: string
    token: string
    fee: BigNumber
}
export type PartnerFixedFeeUpdatedEvent = TypedEvent<[string, string, BigNumber], PartnerFixedFeeUpdatedEventObject>

export type PartnerFixedFeeUpdatedEventFilter = TypedEventFilter<PartnerFixedFeeUpdatedEvent>

export interface PartnerFeeCollector extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: PartnerFeeCollectorInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        WAD(overrides?: CallOverrides): Promise<[BigNumber]>

        activatePartner(
            partner: string,
            feeRate: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<ContractTransaction>

        changeDefaultPartner(
            _defaultPartner: string,
            _defaultFeeRate: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<ContractTransaction>

        claimFee(token: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

        collectFee(
            amount: BigNumberish,
            token: string,
            partner: string,
            overrides?: Overrides & { from?: string }
        ): Promise<ContractTransaction>

        collectedFees(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>

        deactivatePartner(partner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

        defaultPartner(overrides?: CallOverrides): Promise<[string]>

        fixedFee(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>

        initialize(
            _defaultPartner: string,
            _defaultFeeRate: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<ContractTransaction>

        owner(overrides?: CallOverrides): Promise<[string]>

        partners(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<[boolean, BigNumber] & { isActive: boolean; feeRate: BigNumber }>

        renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

        setFeeRate(
            partner: string,
            feeRate: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<ContractTransaction>

        setFixedFee(
            partner: string,
            token: string,
            newFixedFee: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<ContractTransaction>

        transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>
    }

    WAD(overrides?: CallOverrides): Promise<BigNumber>

    activatePartner(
        partner: string,
        feeRate: BigNumberish,
        overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    changeDefaultPartner(
        _defaultPartner: string,
        _defaultFeeRate: BigNumberish,
        overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    claimFee(token: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    collectFee(
        amount: BigNumberish,
        token: string,
        partner: string,
        overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    collectedFees(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    deactivatePartner(partner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    defaultPartner(overrides?: CallOverrides): Promise<string>

    fixedFee(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    initialize(
        _defaultPartner: string,
        _defaultFeeRate: BigNumberish,
        overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<string>

    partners(
        arg0: string,
        overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { isActive: boolean; feeRate: BigNumber }>

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    setFeeRate(
        partner: string,
        feeRate: BigNumberish,
        overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setFixedFee(
        partner: string,
        token: string,
        newFixedFee: BigNumberish,
        overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    callStatic: {
        WAD(overrides?: CallOverrides): Promise<BigNumber>

        activatePartner(partner: string, feeRate: BigNumberish, overrides?: CallOverrides): Promise<void>

        changeDefaultPartner(
            _defaultPartner: string,
            _defaultFeeRate: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        claimFee(token: string, overrides?: CallOverrides): Promise<void>

        collectFee(amount: BigNumberish, token: string, partner: string, overrides?: CallOverrides): Promise<void>

        collectedFees(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

        deactivatePartner(partner: string, overrides?: CallOverrides): Promise<void>

        defaultPartner(overrides?: CallOverrides): Promise<string>

        fixedFee(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

        initialize(_defaultPartner: string, _defaultFeeRate: BigNumberish, overrides?: CallOverrides): Promise<void>

        owner(overrides?: CallOverrides): Promise<string>

        partners(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<[boolean, BigNumber] & { isActive: boolean; feeRate: BigNumber }>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        setFeeRate(partner: string, feeRate: BigNumberish, overrides?: CallOverrides): Promise<void>

        setFixedFee(partner: string, token: string, newFixedFee: BigNumberish, overrides?: CallOverrides): Promise<void>

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'FeeClaimed(address,address,uint256)'(
            partner?: string | null,
            token?: null,
            amount?: null
        ): FeeClaimedEventFilter
        FeeClaimed(partner?: string | null, token?: null, amount?: null): FeeClaimedEventFilter

        'FeeCollected(address,address,uint256,uint256)'(
            partner?: string | null,
            token?: string | null,
            amount?: null,
            fee?: null
        ): FeeCollectedEventFilter
        FeeCollected(partner?: string | null, token?: string | null, amount?: null, fee?: null): FeeCollectedEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: string | null,
            newOwner?: string | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter

        'PartnerActivated(address,uint256)'(partner?: string | null, feeRate?: null): PartnerActivatedEventFilter
        PartnerActivated(partner?: string | null, feeRate?: null): PartnerActivatedEventFilter

        'PartnerDeactivated(address)'(partner?: string | null): PartnerDeactivatedEventFilter
        PartnerDeactivated(partner?: string | null): PartnerDeactivatedEventFilter

        'PartnerFeeRateUpdated(address,uint256)'(
            partner?: string | null,
            feeRate?: null
        ): PartnerFeeRateUpdatedEventFilter
        PartnerFeeRateUpdated(partner?: string | null, feeRate?: null): PartnerFeeRateUpdatedEventFilter

        'PartnerFixedFeeUpdated(address,address,uint256)'(
            partner?: string | null,
            token?: string | null,
            fee?: null
        ): PartnerFixedFeeUpdatedEventFilter
        PartnerFixedFeeUpdated(
            partner?: string | null,
            token?: string | null,
            fee?: null
        ): PartnerFixedFeeUpdatedEventFilter
    }

    estimateGas: {
        WAD(overrides?: CallOverrides): Promise<BigNumber>

        activatePartner(
            partner: string,
            feeRate: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<BigNumber>

        changeDefaultPartner(
            _defaultPartner: string,
            _defaultFeeRate: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<BigNumber>

        claimFee(token: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

        collectFee(
            amount: BigNumberish,
            token: string,
            partner: string,
            overrides?: Overrides & { from?: string }
        ): Promise<BigNumber>

        collectedFees(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

        deactivatePartner(partner: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

        defaultPartner(overrides?: CallOverrides): Promise<BigNumber>

        fixedFee(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

        initialize(
            _defaultPartner: string,
            _defaultFeeRate: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        partners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>

        setFeeRate(
            partner: string,
            feeRate: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<BigNumber>

        setFixedFee(
            partner: string,
            token: string,
            newFixedFee: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<BigNumber>

        transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>
    }

    populateTransaction: {
        WAD(overrides?: CallOverrides): Promise<PopulatedTransaction>

        activatePartner(
            partner: string,
            feeRate: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<PopulatedTransaction>

        changeDefaultPartner(
            _defaultPartner: string,
            _defaultFeeRate: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<PopulatedTransaction>

        claimFee(token: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

        collectFee(
            amount: BigNumberish,
            token: string,
            partner: string,
            overrides?: Overrides & { from?: string }
        ): Promise<PopulatedTransaction>

        collectedFees(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        deactivatePartner(partner: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

        defaultPartner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        fixedFee(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        initialize(
            _defaultPartner: string,
            _defaultFeeRate: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        partners(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

        setFeeRate(
            partner: string,
            feeRate: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<PopulatedTransaction>

        setFixedFee(
            partner: string,
            token: string,
            newFixedFee: BigNumberish,
            overrides?: Overrides & { from?: string }
        ): Promise<PopulatedTransaction>

        transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>
    }
}
